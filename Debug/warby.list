
warby.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006310  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800651c  0800651c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800651c  0800651c  0001651c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006524  08006524  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800652c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000078  080065a4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080065a4  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da74  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b5e  00000000  00000000  0002db1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  0002f680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d88  00000000  00000000  000304c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016811  00000000  00000000  00031248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009fce  00000000  00000000  00047a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e569  00000000  00000000  00051a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dff90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000422c  00000000  00000000  000e000c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006498 	.word	0x08006498

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006498 	.word	0x08006498

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 b972 	b.w	8000e88 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14b      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4615      	mov	r5, r2
 8000bce:	d967      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0720 	rsb	r7, r2, #32
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	fa20 f707 	lsr.w	r7, r0, r7
 8000be2:	4095      	lsls	r5, r2
 8000be4:	ea47 0803 	orr.w	r8, r7, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf4:	fa1f fc85 	uxth.w	ip, r5
 8000bf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c00:	fb07 f10c 	mul.w	r1, r7, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c0e:	f080 811b 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8118 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c18:	3f02      	subs	r7, #2
 8000c1a:	442b      	add	r3, r5
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c30:	45a4      	cmp	ip, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	192c      	adds	r4, r5, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c4c:	eba4 040c 	sub.w	r4, r4, ip
 8000c50:	2700      	movs	r7, #0
 8000c52:	b11e      	cbz	r6, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xbe>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80eb 	beq.w	8000e42 <__udivmoddi4+0x286>
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c72:	4638      	mov	r0, r7
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f783 	clz	r7, r3
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d147      	bne.n	8000d12 <__udivmoddi4+0x156>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd0>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fa 	bhi.w	8000e80 <__udivmoddi4+0x2c4>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xe8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 808f 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cae:	1b49      	subs	r1, r1, r5
 8000cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb4:	fa1f f885 	uxth.w	r8, r5
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x14c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x14a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80b6 	bhi.w	8000e72 <__udivmoddi4+0x2b6>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e79f      	b.n	8000c52 <__udivmoddi4+0x96>
 8000d12:	f1c7 0c20 	rsb	ip, r7, #32
 8000d16:	40bb      	lsls	r3, r7
 8000d18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d20:	fa01 f407 	lsl.w	r4, r1, r7
 8000d24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d30:	4325      	orrs	r5, r4
 8000d32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	fb08 3319 	mls	r3, r8, r9, r3
 8000d3c:	fa1f fa8e 	uxth.w	sl, lr
 8000d40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d44:	fb09 f40a 	mul.w	r4, r9, sl
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1e 0303 	adds.w	r3, lr, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d5c:	f080 8087 	bcs.w	8000e6e <__udivmoddi4+0x2b2>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f240 8084 	bls.w	8000e6e <__udivmoddi4+0x2b2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4473      	add	r3, lr
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	b2ad      	uxth	r5, r5
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1e 0404 	adds.w	r4, lr, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8c:	d26b      	bcs.n	8000e66 <__udivmoddi4+0x2aa>
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d969      	bls.n	8000e66 <__udivmoddi4+0x2aa>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4474      	add	r4, lr
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	eba4 040a 	sub.w	r4, r4, sl
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c2      	mov	sl, r8
 8000da6:	464b      	mov	r3, r9
 8000da8:	d354      	bcc.n	8000e54 <__udivmoddi4+0x298>
 8000daa:	d051      	beq.n	8000e50 <__udivmoddi4+0x294>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d069      	beq.n	8000e84 <__udivmoddi4+0x2c8>
 8000db0:	ebb1 050a 	subs.w	r5, r1, sl
 8000db4:	eb64 0403 	sbc.w	r4, r4, r3
 8000db8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	40fc      	lsrs	r4, r7
 8000dc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de2:	4338      	orrs	r0, r7
 8000de4:	0c01      	lsrs	r1, r0, #16
 8000de6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dea:	fa1f f885 	uxth.w	r8, r5
 8000dee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb07 f308 	mul.w	r3, r7, r8
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x256>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e08:	d22f      	bcs.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d92d      	bls.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b281      	uxth	r1, r0
 8000e16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb00 f308 	mul.w	r3, r0, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x27e>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e30:	d217      	bcs.n	8000e62 <__udivmoddi4+0x2a6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d915      	bls.n	8000e62 <__udivmoddi4+0x2a6>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e40:	e73b      	b.n	8000cba <__udivmoddi4+0xfe>
 8000e42:	4637      	mov	r7, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e709      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e6e7      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e50:	4541      	cmp	r1, r8
 8000e52:	d2ab      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 020e 	sbc.w	r2, r9, lr
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	e7a4      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e62:	4660      	mov	r0, ip
 8000e64:	e7e9      	b.n	8000e3a <__udivmoddi4+0x27e>
 8000e66:	4618      	mov	r0, r3
 8000e68:	e795      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6a:	4667      	mov	r7, ip
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x256>
 8000e6e:	4681      	mov	r9, r0
 8000e70:	e77c      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	442c      	add	r4, r5
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0x14c>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	442b      	add	r3, r5
 8000e7e:	e72f      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e80:	4638      	mov	r0, r7
 8000e82:	e708      	b.n	8000c96 <__udivmoddi4+0xda>
 8000e84:	4637      	mov	r7, r6
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0xa0>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)  // if the interrupt source is tim2
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9c:	d14b      	bne.n	8000f36 <HAL_TIM_IC_CaptureCallback+0xaa>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d11a      	bne.n	8000edc <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f003 fce7 	bl	800487c <HAL_TIM_ReadCapturedValue>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000eb2:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6a1a      	ldr	r2, [r3, #32]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 020a 	bic.w	r2, r2, #10
 8000ec8:	621a      	str	r2, [r3, #32]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6a1a      	ldr	r2, [r3, #32]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f042 0202 	orr.w	r2, r2, #2
 8000ed8:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);

		}
	}
}
 8000eda:	e02c      	b.n	8000f36 <HAL_TIM_IC_CaptureCallback+0xaa>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d128      	bne.n	8000f36 <HAL_TIM_IC_CaptureCallback+0xaa>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f003 fcc8 	bl	800487c <HAL_TIM_ReadCapturedValue>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000ef0:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d906      	bls.n	8000f14 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000f12:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a1a      	ldr	r2, [r3, #32]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 020a 	bic.w	r2, r2, #10
 8000f28:	621a      	str	r2, [r3, #32]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6a12      	ldr	r2, [r2, #32]
 8000f34:	621a      	str	r2, [r3, #32]
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000b4 	.word	0x200000b4
 8000f44:	200000a8 	.word	0x200000a8
 8000f48:	200000ac 	.word	0x200000ac
 8000f4c:	200000b0 	.word	0x200000b0

08000f50 <get_light_val>:

int get_light_val() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t buf[20];
	// Tell TMP102 that we want to read from the temperature register
	buf[0] = 0b01000000; // control byte
 8000f56:	2340      	movs	r3, #64	; 0x40
 8000f58:	703b      	strb	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PC8591_ADDR, buf, 1, HAL_MAX_DELAY);
 8000f5a:	2390      	movs	r3, #144	; 0x90
 8000f5c:	b299      	uxth	r1, r3
 8000f5e:	463a      	mov	r2, r7
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <get_light_val+0x74>)
 8000f6a:	f001 fd83 	bl	8002a74 <HAL_I2C_Master_Transmit>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	75fb      	strb	r3, [r7, #23]
	if ( ret != HAL_OK ) {
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d008      	beq.n	8000f8a <get_light_val+0x3a>
	  strcpy((char*)buf, "Error Tx\r\n");
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <get_light_val+0x78>)
 8000f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7e:	c303      	stmia	r3!, {r0, r1}
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	3302      	adds	r3, #2
 8000f84:	0c12      	lsrs	r2, r2, #16
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e016      	b.n	8000fb8 <get_light_val+0x68>
	} else {

	  // Read 2 bytes from the temperature register
	  ret = HAL_I2C_Master_Receive(&hi2c1, PC8591_ADDR, buf, 2, HAL_MAX_DELAY);
 8000f8a:	2390      	movs	r3, #144	; 0x90
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	463a      	mov	r2, r7
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2302      	movs	r3, #2
 8000f98:	480a      	ldr	r0, [pc, #40]	; (8000fc4 <get_light_val+0x74>)
 8000f9a:	f001 fe69 	bl	8002c70 <HAL_I2C_Master_Receive>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	75fb      	strb	r3, [r7, #23]
	  if ( ret != HAL_OK ) {
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d007      	beq.n	8000fb8 <get_light_val+0x68>
		strcpy((char*)buf, "Error Rx\r\n");
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <get_light_val+0x7c>)
 8000fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fae:	c303      	stmia	r3!, {r0, r1}
 8000fb0:	801a      	strh	r2, [r3, #0]
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	0c12      	lsrs	r2, r2, #16
 8000fb6:	701a      	strb	r2, [r3, #0]
	  }
	}
	return buf[1]; // second read is more reliable
 8000fb8:	787b      	ldrb	r3, [r7, #1]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000104 	.word	0x20000104
 8000fc8:	080064b0 	.word	0x080064b0
 8000fcc:	080064bc 	.word	0x080064bc

08000fd0 <get_dist_val>:

int get_dist_val() {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_2, 5);
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <get_dist_val+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2205      	movs	r2, #5
 8000fdc:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t number = Difference;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <get_dist_val+0x28>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	607b      	str	r3, [r7, #4]
	return number;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000158 	.word	0x20000158
 8000ff8:	200000b0 	.word	0x200000b0

08000ffc <brake>:

void brake() {
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <brake+0x20>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2200      	movs	r2, #0
 8001006:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <brake+0x24>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2200      	movs	r2, #0
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000198 	.word	0x20000198
 8001020:	200000c4 	.word	0x200000c4

08001024 <turnR>:

void turnR(uint32_t timer) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <turnR+0x38>)
 8001034:	f001 fbcc 	bl	80027d0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <turnR+0x3c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 100);
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <turnR+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2264      	movs	r2, #100	; 0x64
 8001046:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(timer);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f001 f90b 	bl	8002264 <HAL_Delay>
	brake();
 800104e:	f7ff ffd5 	bl	8000ffc <brake>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020000 	.word	0x40020000
 8001060:	20000198 	.word	0x20000198
 8001064:	200000c4 	.word	0x200000c4

08001068 <turnL>:

void turnL(uint32_t timer) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <turnL+0x38>)
 8001078:	f001 fbaa 	bl	80027d0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 100);
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <turnL+0x3c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2264      	movs	r2, #100	; 0x64
 8001082:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <turnL+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(timer);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f001 f8e9 	bl	8002264 <HAL_Delay>
	brake();
 8001092:	f7ff ffb3 	bl	8000ffc <brake>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40020000 	.word	0x40020000
 80010a4:	20000198 	.word	0x20000198
 80010a8:	200000c4 	.word	0x200000c4

080010ac <moveF>:

void moveF(uint32_t timer, int speed) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <moveF+0x40>)
 80010be:	f001 fb87 	bl	80027d0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, speed);
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <moveF+0x44>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <moveF+0x40>)
 80010d2:	f001 fb7d 	bl	80027d0 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, speed);
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <moveF+0x48>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(timer);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f001 f8c0 	bl	8002264 <HAL_Delay>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40020000 	.word	0x40020000
 80010f0:	20000198 	.word	0x20000198
 80010f4:	200000c4 	.word	0x200000c4

080010f8 <LightDetectHandler>:

//Prototype of eventhandlers
eSystemState LightDetectHandler()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	if(pwm_light > 15) {
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <LightDetectHandler+0x48>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	dd0a      	ble.n	800111a <LightDetectHandler+0x22>
		turnL((pwm_light - 15)*pwm_scale);
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <LightDetectHandler+0x48>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3b0f      	subs	r3, #15
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <LightDetectHandler+0x4c>)
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ffa8 	bl	8001068 <turnL>
 8001118:	e00a      	b.n	8001130 <LightDetectHandler+0x38>
	}
	else {
		turnR((15 - pwm_light)*pwm_scale);
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <LightDetectHandler+0x48>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1c3 030f 	rsb	r3, r3, #15
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <LightDetectHandler+0x4c>)
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff7a 	bl	8001024 <turnR>
	}
	moveF(100, 50);
 8001130:	2132      	movs	r1, #50	; 0x32
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f7ff ffba 	bl	80010ac <moveF>
    return Transit_State;
 8001138:	2301      	movs	r3, #1
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000098 	.word	0x20000098
 8001144:	20000004 	.word	0x20000004

08001148 <LightOutOfRangeHandler>:
eSystemState LightOutOfRangeHandler()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	turnL(20*pwm_scale);
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <LightOutOfRangeHandler+0x1c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff85 	bl	8001068 <turnL>
    return Init_State;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000004 	.word	0x20000004

08001168 <ObstacleDetectHandler>:
eSystemState ObstacleDetectHandler()
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
//	}
//	else {
//		turnL((pwm_dist -15)*pwm_scale);
//	}

	double alpha_0 = 8.57142857;
 800116e:	a424      	add	r4, pc, #144	; (adr r4, 8001200 <ObstacleDetectHandler+0x98>)
 8001170:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001174:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double rebound = rebound_angle;
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <ObstacleDetectHandler+0x90>)
 800117a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800117e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	int angle = rebound_angle/alpha_0;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <ObstacleDetectHandler+0x90>)
 8001184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001188:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800118c:	f7ff fb66 	bl	800085c <__aeabi_ddiv>
 8001190:	4603      	mov	r3, r0
 8001192:	460c      	mov	r4, r1
 8001194:	4618      	mov	r0, r3
 8001196:	4621      	mov	r1, r4
 8001198:	f7ff fcd0 	bl	8000b3c <__aeabi_d2iz>
 800119c:	4603      	mov	r3, r0
 800119e:	607b      	str	r3, [r7, #4]
	if(rebound_angle > 0) { // open space to left
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <ObstacleDetectHandler+0x90>)
 80011a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	f7ff fcbb 	bl	8000b28 <__aeabi_dcmpgt>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <ObstacleDetectHandler+0x62>
		turnL(angle*pwm_scale);
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <ObstacleDetectHandler+0x94>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff50 	bl	8001068 <turnL>
 80011c8:	e008      	b.n	80011dc <ObstacleDetectHandler+0x74>
	}
	else { // open space to right
		turnR(-1*angle*pwm_scale);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	425b      	negs	r3, r3
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <ObstacleDetectHandler+0x94>)
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff24 	bl	8001024 <turnR>
	}
	moveF(500, 50);
 80011dc:	2132      	movs	r1, #50	; 0x32
 80011de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e2:	f7ff ff63 	bl	80010ac <moveF>
	brake();
 80011e6:	f7ff ff09 	bl	8000ffc <brake>
    return Obstacle_Detect_Transit_State;
 80011ea:	2302      	movs	r3, #2
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	f3af 8000 	nop.w
 80011f8:	200000a0 	.word	0x200000a0
 80011fc:	20000004 	.word	0x20000004
 8001200:	49184cd3 	.word	0x49184cd3
 8001204:	40212492 	.word	0x40212492

08001208 <ReadEvent>:


eSystemEvent ReadEvent() {
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b08e      	sub	sp, #56	; 0x38
 800120c:	af00      	add	r7, sp, #0
	eSystemEvent event = Light_Out_Of_Range_Event;
 800120e:	2301      	movs	r3, #1
 8001210:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t curr_light = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	75fb      	strb	r3, [r7, #23]
	uint32_t curr_dist = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
	double N = 21;
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	4c5d      	ldr	r4, [pc, #372]	; (8001398 <ReadEvent+0x190>)
 8001222:	e9c7 3402 	strd	r3, r4, [r7, #8]
	double alpha_0 = 8.57142857;
 8001226:	a45a      	add	r4, pc, #360	; (adr r4, 8001390 <ReadEvent+0x188>)
 8001228:	e9d4 3400 	ldrd	r3, r4, [r4]
 800122c:	e9c7 3400 	strd	r3, r4, [r7]
	double num = 0; // numerator of rebound_angle
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	f04f 0400 	mov.w	r4, #0
 8001238:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	double denom = 0; // denominator of rebound_angle
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	f04f 0400 	mov.w	r4, #0
 8001244:	e9c7 3408 	strd	r3, r4, [r7, #32]
	int i = -N/2;
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f083 4100 	eor.w	r1, r3, #2147483648	; 0x80000000
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001258:	f7ff fb00 	bl	800085c <__aeabi_ddiv>
 800125c:	4603      	mov	r3, r0
 800125e:	460c      	mov	r4, r1
 8001260:	4618      	mov	r0, r3
 8001262:	4621      	mov	r1, r4
 8001264:	f7ff fc6a 	bl	8000b3c <__aeabi_d2iz>
 8001268:	4603      	mov	r3, r0
 800126a:	61fb      	str	r3, [r7, #28]
	int bright = 240;
 800126c:	23f0      	movs	r3, #240	; 0xf0
 800126e:	61bb      	str	r3, [r7, #24]
	for(servo_pwm = 5; servo_pwm < 26; ++servo_pwm) {
 8001270:	4b4a      	ldr	r3, [pc, #296]	; (800139c <ReadEvent+0x194>)
 8001272:	2205      	movs	r2, #5
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e073      	b.n	8001360 <ReadEvent+0x158>
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, servo_pwm); // send servo pwm sig
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <ReadEvent+0x194>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <ReadEvent+0x198>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(15);
 8001282:	200f      	movs	r0, #15
 8001284:	f000 ffee 	bl	8002264 <HAL_Delay>
		curr_light = get_light_val();
 8001288:	f7ff fe62 	bl	8000f50 <get_light_val>
 800128c:	4603      	mov	r3, r0
 800128e:	75fb      	strb	r3, [r7, #23]
		if(curr_light < bright) {
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	429a      	cmp	r2, r3
 8001296:	dd08      	ble.n	80012aa <ReadEvent+0xa2>
			pwm_light = servo_pwm;
 8001298:	4b40      	ldr	r3, [pc, #256]	; (800139c <ReadEvent+0x194>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a41      	ldr	r2, [pc, #260]	; (80013a4 <ReadEvent+0x19c>)
 800129e:	6013      	str	r3, [r2, #0]
			bright = curr_light;
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	61bb      	str	r3, [r7, #24]
			event = Light_Detect_Event;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		curr_dist = get_dist_val();
 80012aa:	f7ff fe91 	bl	8000fd0 <get_dist_val>
 80012ae:	4603      	mov	r3, r0
 80012b0:	613b      	str	r3, [r7, #16]
		sprintf((char*)buf, "%u\r\n", (unsigned int) curr_dist);
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	493c      	ldr	r1, [pc, #240]	; (80013a8 <ReadEvent+0x1a0>)
 80012b6:	483d      	ldr	r0, [pc, #244]	; (80013ac <ReadEvent+0x1a4>)
 80012b8:	f004 fce8 	bl	8005c8c <siprintf>
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80012bc:	483b      	ldr	r0, [pc, #236]	; (80013ac <ReadEvent+0x1a4>)
 80012be:	f7fe ff8f 	bl	80001e0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ca:	4938      	ldr	r1, [pc, #224]	; (80013ac <ReadEvent+0x1a4>)
 80012cc:	4838      	ldr	r0, [pc, #224]	; (80013b0 <ReadEvent+0x1a8>)
 80012ce:	f004 f84c 	bl	800536a <HAL_UART_Transmit>
		HAL_Delay(250);
 80012d2:	20fa      	movs	r0, #250	; 0xfa
 80012d4:	f000 ffc6 	bl	8002264 <HAL_Delay>
		if(curr_dist < close) {
 80012d8:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <ReadEvent+0x1ac>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d206      	bcs.n	80012f2 <ReadEvent+0xea>
			pwm_dist = servo_pwm;
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <ReadEvent+0x194>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <ReadEvent+0x1b0>)
 80012ea:	6013      	str	r3, [r2, #0]
			event = Obstacle_Detect_Event;
 80012ec:	2302      	movs	r3, #2
 80012ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		num += (i*alpha_0*curr_dist);
 80012f2:	69f8      	ldr	r0, [r7, #28]
 80012f4:	f7ff f91e 	bl	8000534 <__aeabi_i2d>
 80012f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fc:	f7ff f984 	bl	8000608 <__aeabi_dmul>
 8001300:	4603      	mov	r3, r0
 8001302:	460c      	mov	r4, r1
 8001304:	4625      	mov	r5, r4
 8001306:	461c      	mov	r4, r3
 8001308:	6938      	ldr	r0, [r7, #16]
 800130a:	f7ff f903 	bl	8000514 <__aeabi_ui2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7ff f977 	bl	8000608 <__aeabi_dmul>
 800131a:	4603      	mov	r3, r0
 800131c:	460c      	mov	r4, r1
 800131e:	461a      	mov	r2, r3
 8001320:	4623      	mov	r3, r4
 8001322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001326:	f7fe ffb9 	bl	800029c <__adddf3>
 800132a:	4603      	mov	r3, r0
 800132c:	460c      	mov	r4, r1
 800132e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		denom += curr_dist;
 8001332:	6938      	ldr	r0, [r7, #16]
 8001334:	f7ff f8ee 	bl	8000514 <__aeabi_ui2d>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001344:	f7fe ffaa 	bl	800029c <__adddf3>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	e9c7 3408 	strd	r3, r4, [r7, #32]
		++i;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	3301      	adds	r3, #1
 8001354:	61fb      	str	r3, [r7, #28]
	for(servo_pwm = 5; servo_pwm < 26; ++servo_pwm) {
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <ReadEvent+0x194>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <ReadEvent+0x194>)
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <ReadEvent+0x194>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b19      	cmp	r3, #25
 8001366:	dd87      	ble.n	8001278 <ReadEvent+0x70>
	}
	rebound_angle = num/denom;
 8001368:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800136c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001370:	f7ff fa74 	bl	800085c <__aeabi_ddiv>
 8001374:	4603      	mov	r3, r0
 8001376:	460c      	mov	r4, r1
 8001378:	4a10      	ldr	r2, [pc, #64]	; (80013bc <ReadEvent+0x1b4>)
 800137a:	e9c2 3400 	strd	r3, r4, [r2]
	return event;
 800137e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001382:	4618      	mov	r0, r3
 8001384:	3738      	adds	r7, #56	; 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bdb0      	pop	{r4, r5, r7, pc}
 800138a:	bf00      	nop
 800138c:	f3af 8000 	nop.w
 8001390:	49184cd3 	.word	0x49184cd3
 8001394:	40212492 	.word	0x40212492
 8001398:	40350000 	.word	0x40350000
 800139c:	20000094 	.word	0x20000094
 80013a0:	200001d8 	.word	0x200001d8
 80013a4:	20000098 	.word	0x20000098
 80013a8:	080064c8 	.word	0x080064c8
 80013ac:	20000218 	.word	0x20000218
 80013b0:	2000026c 	.word	0x2000026c
 80013b4:	20000000 	.word	0x20000000
 80013b8:	2000009c 	.word	0x2000009c
 80013bc:	200000a0 	.word	0x200000a0

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	eSystemState NextState = Init_State;
 80013c6:	2300      	movs	r3, #0
 80013c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f000 fed9 	bl	8002180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ce:	f000 f86f 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d2:	f000 fba9 	bl	8001b28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013d6:	f000 fb7d 	bl	8001ad4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013da:	f000 f901 	bl	80015e0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80013de:	f000 f8d3 	bl	8001588 <MX_I2C1_Init>
  MX_TIM3_Init();
 80013e2:	f000 fa11 	bl	8001808 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013e6:	f000 fa87 	bl	80018f8 <MX_TIM4_Init>
  MX_TIM2_Init();
 80013ea:	f000 f99b 	bl	8001724 <MX_TIM2_Init>
  MX_TIM5_Init();
 80013ee:	f000 fafb 	bl	80019e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80013f2:	2104      	movs	r1, #4
 80013f4:	4829      	ldr	r0, [pc, #164]	; (800149c <main+0xdc>)
 80013f6:	f002 fe4f 	bl	8004098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013fa:	2108      	movs	r1, #8
 80013fc:	4828      	ldr	r0, [pc, #160]	; (80014a0 <main+0xe0>)
 80013fe:	f002 fe4b 	bl	8004098 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001402:	2100      	movs	r1, #0
 8001404:	4827      	ldr	r0, [pc, #156]	; (80014a4 <main+0xe4>)
 8001406:	f002 feaf 	bl	8004168 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800140a:	2104      	movs	r1, #4
 800140c:	4826      	ldr	r0, [pc, #152]	; (80014a8 <main+0xe8>)
 800140e:	f002 fe43 	bl	8004098 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001412:	2100      	movs	r1, #0
 8001414:	4825      	ldr	r0, [pc, #148]	; (80014ac <main+0xec>)
 8001416:	f002 fe3f 	bl	8004098 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  NewEvent = ReadEvent();
 800141a:	f7ff fef5 	bl	8001208 <ReadEvent>
 800141e:	4603      	mov	r3, r0
 8001420:	71bb      	strb	r3, [r7, #6]

	  switch(NextState) {
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d018      	beq.n	800145a <main+0x9a>
 8001428:	2b02      	cmp	r3, #2
 800142a:	d021      	beq.n	8001470 <main+0xb0>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d134      	bne.n	800149a <main+0xda>
	  case Init_State:
		  if(NewEvent == Obstacle_Detect_Event) {
 8001430:	79bb      	ldrb	r3, [r7, #6]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d104      	bne.n	8001440 <main+0x80>
			  NextState = ObstacleDetectHandler();
 8001436:	f7ff fe97 	bl	8001168 <ObstacleDetectHandler>
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
			  NextState = LightOutOfRangeHandler();
		  }
		  else {
			  NextState = LightDetectHandler();
		  }
		  break;
 800143e:	e02c      	b.n	800149a <main+0xda>
		  else if(NewEvent == Light_Out_Of_Range_Event) {
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d104      	bne.n	8001450 <main+0x90>
			  NextState = LightOutOfRangeHandler();
 8001446:	f7ff fe7f 	bl	8001148 <LightOutOfRangeHandler>
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
		  break;
 800144e:	e024      	b.n	800149a <main+0xda>
			  NextState = LightDetectHandler();
 8001450:	f7ff fe52 	bl	80010f8 <LightDetectHandler>
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
		  break;
 8001458:	e01f      	b.n	800149a <main+0xda>
	  case Transit_State:
		  if(NewEvent == Obstacle_Detect_Event) {
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d104      	bne.n	800146a <main+0xaa>
			  NextState = ObstacleDetectHandler();
 8001460:	f7ff fe82 	bl	8001168 <ObstacleDetectHandler>
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
		  }
		  else {
			  NextState = Transit_State;
		  }
		  break;
 8001468:	e017      	b.n	800149a <main+0xda>
			  NextState = Transit_State;
 800146a:	2301      	movs	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
		  break;
 800146e:	e014      	b.n	800149a <main+0xda>
	  case Obstacle_Detect_Transit_State:
		  if(NewEvent == Obstacle_Detect_Event) {
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d104      	bne.n	8001480 <main+0xc0>
			  NextState = ObstacleDetectHandler();
 8001476:	f7ff fe77 	bl	8001168 <ObstacleDetectHandler>
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
			  NextState = LightOutOfRangeHandler();
		  }
		  else {
			  NextState = LightDetectHandler();
		  }
		  break;
 800147e:	e00b      	b.n	8001498 <main+0xd8>
		  else if(NewEvent == Light_Out_Of_Range_Event) {
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d104      	bne.n	8001490 <main+0xd0>
			  NextState = LightOutOfRangeHandler();
 8001486:	f7ff fe5f 	bl	8001148 <LightOutOfRangeHandler>
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
		  break;
 800148e:	e003      	b.n	8001498 <main+0xd8>
			  NextState = LightDetectHandler();
 8001490:	f7ff fe32 	bl	80010f8 <LightDetectHandler>
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
		  break;
 8001498:	bf00      	nop
	  NewEvent = ReadEvent();
 800149a:	e7be      	b.n	800141a <main+0x5a>
 800149c:	20000158 	.word	0x20000158
 80014a0:	200001d8 	.word	0x200001d8
 80014a4:	2000022c 	.word	0x2000022c
 80014a8:	20000198 	.word	0x20000198
 80014ac:	200000c4 	.word	0x200000c4

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	; 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	; 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 fbdc 	bl	8005c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <SystemClock_Config+0xd0>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a28      	ldr	r2, [pc, #160]	; (8001580 <SystemClock_Config+0xd0>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <SystemClock_Config+0xd0>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <SystemClock_Config+0xd4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <SystemClock_Config+0xd4>)
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <SystemClock_Config+0xd4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001518:	2310      	movs	r3, #16
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2302      	movs	r3, #2
 800151e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001524:	2310      	movs	r3, #16
 8001526:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001528:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800152c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800152e:	2304      	movs	r3, #4
 8001530:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001532:	2307      	movs	r3, #7
 8001534:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	4618      	mov	r0, r3
 800153c:	f002 f8ea 	bl	8003714 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001546:	f000 fb61 	bl	8001c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	230f      	movs	r3, #15
 800154c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154e:	2302      	movs	r3, #2
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2102      	movs	r1, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fb44 	bl	8003bf4 <HAL_RCC_ClockConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001572:	f000 fb4b 	bl	8001c0c <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3750      	adds	r7, #80	; 0x50
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40007000 	.word	0x40007000

08001588 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_I2C1_Init+0x50>)
 800158e:	4a13      	ldr	r2, [pc, #76]	; (80015dc <MX_I2C1_Init+0x54>)
 8001590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_I2C1_Init+0x50>)
 8001594:	2264      	movs	r2, #100	; 0x64
 8001596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <MX_I2C1_Init+0x50>)
 80015c6:	f001 f91d 	bl	8002804 <HAL_I2C_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015d0:	f000 fb1c 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000104 	.word	0x20000104
 80015dc:	40005400 	.word	0x40005400

080015e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b096      	sub	sp, #88	; 0x58
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2220      	movs	r2, #32
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fb2f 	bl	8005c7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <MX_TIM1_Init+0x13c>)
 8001620:	4a3f      	ldr	r2, [pc, #252]	; (8001720 <MX_TIM1_Init+0x140>)
 8001622:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 8001624:	4b3d      	ldr	r3, [pc, #244]	; (800171c <MX_TIM1_Init+0x13c>)
 8001626:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800162a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b3b      	ldr	r3, [pc, #236]	; (800171c <MX_TIM1_Init+0x13c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001632:	4b3a      	ldr	r3, [pc, #232]	; (800171c <MX_TIM1_Init+0x13c>)
 8001634:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <MX_TIM1_Init+0x13c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001640:	4b36      	ldr	r3, [pc, #216]	; (800171c <MX_TIM1_Init+0x13c>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b35      	ldr	r3, [pc, #212]	; (800171c <MX_TIM1_Init+0x13c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800164c:	4833      	ldr	r0, [pc, #204]	; (800171c <MX_TIM1_Init+0x13c>)
 800164e:	f002 fcc3 	bl	8003fd8 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001658:	f000 fad8 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001666:	4619      	mov	r1, r3
 8001668:	482c      	ldr	r0, [pc, #176]	; (800171c <MX_TIM1_Init+0x13c>)
 800166a:	f003 f84f 	bl	800470c <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001674:	f000 faca 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001678:	4828      	ldr	r0, [pc, #160]	; (800171c <MX_TIM1_Init+0x13c>)
 800167a:	f002 fcd8 	bl	800402e <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001684:	f000 fac2 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001694:	4619      	mov	r1, r3
 8001696:	4821      	ldr	r0, [pc, #132]	; (800171c <MX_TIM1_Init+0x13c>)
 8001698:	f003 fd46 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80016a2:	f000 fab3 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	; 0x60
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	2208      	movs	r2, #8
 80016c8:	4619      	mov	r1, r3
 80016ca:	4814      	ldr	r0, [pc, #80]	; (800171c <MX_TIM1_Init+0x13c>)
 80016cc:	f002 ff58 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80016d6:	f000 fa99 	bl	8001c0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM1_Init+0x13c>)
 80016fe:	f003 fd81 	bl	8005204 <HAL_TIMEx_ConfigBreakDeadTime>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001708:	f000 fa80 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM1_Init+0x13c>)
 800170e:	f000 fb9b 	bl	8001e48 <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3758      	adds	r7, #88	; 0x58
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200001d8 	.word	0x200001d8
 8001720:	40010000 	.word	0x40010000

08001724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0318 	add.w	r3, r7, #24
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001742:	463b      	mov	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <MX_TIM2_Init+0xdc>)
 8001750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001754:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <MX_TIM2_Init+0xdc>)
 8001758:	f24a 4210 	movw	r2, #42000	; 0xa410
 800175c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <MX_TIM2_Init+0xdc>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <MX_TIM2_Init+0xdc>)
 8001766:	4a27      	ldr	r2, [pc, #156]	; (8001804 <MX_TIM2_Init+0xe0>)
 8001768:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <MX_TIM2_Init+0xdc>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <MX_TIM2_Init+0xdc>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001776:	4822      	ldr	r0, [pc, #136]	; (8001800 <MX_TIM2_Init+0xdc>)
 8001778:	f002 fc2e 	bl	8003fd8 <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001782:	f000 fa43 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800178c:	f107 0318 	add.w	r3, r7, #24
 8001790:	4619      	mov	r1, r3
 8001792:	481b      	ldr	r0, [pc, #108]	; (8001800 <MX_TIM2_Init+0xdc>)
 8001794:	f002 ffba 	bl	800470c <HAL_TIM_ConfigClockSource>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800179e:	f000 fa35 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017a2:	4817      	ldr	r0, [pc, #92]	; (8001800 <MX_TIM2_Init+0xdc>)
 80017a4:	f002 fcaa 	bl	80040fc <HAL_TIM_IC_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017ae:	f000 fa2d 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	4619      	mov	r1, r3
 80017c0:	480f      	ldr	r0, [pc, #60]	; (8001800 <MX_TIM2_Init+0xdc>)
 80017c2:	f003 fcb1 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80017cc:	f000 fa1e 	bl	8001c0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017d0:	2300      	movs	r3, #0
 80017d2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017d4:	2301      	movs	r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	; (8001800 <MX_TIM2_Init+0xdc>)
 80017e8:	f002 fe2e 	bl	8004448 <HAL_TIM_IC_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80017f2:	f000 fa0b 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3728      	adds	r7, #40	; 0x28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000022c 	.word	0x2000022c
 8001804:	000186a0 	.word	0x000186a0

08001808 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	; 0x38
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	f107 0320 	add.w	r3, r7, #32
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	615a      	str	r2, [r3, #20]
 8001836:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <MX_TIM3_Init+0xe8>)
 800183a:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <MX_TIM3_Init+0xec>)
 800183c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <MX_TIM3_Init+0xe8>)
 8001840:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001844:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <MX_TIM3_Init+0xe8>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <MX_TIM3_Init+0xe8>)
 800184e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001852:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <MX_TIM3_Init+0xe8>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <MX_TIM3_Init+0xe8>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001860:	4823      	ldr	r0, [pc, #140]	; (80018f0 <MX_TIM3_Init+0xe8>)
 8001862:	f002 fbb9 	bl	8003fd8 <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800186c:	f000 f9ce 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187a:	4619      	mov	r1, r3
 800187c:	481c      	ldr	r0, [pc, #112]	; (80018f0 <MX_TIM3_Init+0xe8>)
 800187e:	f002 ff45 	bl	800470c <HAL_TIM_ConfigClockSource>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001888:	f000 f9c0 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800188c:	4818      	ldr	r0, [pc, #96]	; (80018f0 <MX_TIM3_Init+0xe8>)
 800188e:	f002 fbce 	bl	800402e <HAL_TIM_PWM_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001898:	f000 f9b8 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4619      	mov	r1, r3
 80018aa:	4811      	ldr	r0, [pc, #68]	; (80018f0 <MX_TIM3_Init+0xe8>)
 80018ac:	f003 fc3c 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018b6:	f000 f9a9 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ba:	2360      	movs	r3, #96	; 0x60
 80018bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2204      	movs	r2, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <MX_TIM3_Init+0xe8>)
 80018d2:	f002 fe55 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018dc:	f000 f996 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <MX_TIM3_Init+0xe8>)
 80018e2:	f000 fab1 	bl	8001e48 <HAL_TIM_MspPostInit>

}
 80018e6:	bf00      	nop
 80018e8:	3738      	adds	r7, #56	; 0x38
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000198 	.word	0x20000198
 80018f4:	40000400 	.word	0x40000400

080018f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	615a      	str	r2, [r3, #20]
 8001926:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800192a:	4a2e      	ldr	r2, [pc, #184]	; (80019e4 <MX_TIM4_Init+0xec>)
 800192c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 800192e:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001930:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001934:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 800193c:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800193e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001942:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001944:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001950:	4823      	ldr	r0, [pc, #140]	; (80019e0 <MX_TIM4_Init+0xe8>)
 8001952:	f002 fb41 	bl	8003fd8 <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800195c:	f000 f956 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196a:	4619      	mov	r1, r3
 800196c:	481c      	ldr	r0, [pc, #112]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800196e:	f002 fecd 	bl	800470c <HAL_TIM_ConfigClockSource>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001978:	f000 f948 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800197c:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800197e:	f002 fb56 	bl	800402e <HAL_TIM_PWM_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001988:	f000 f940 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4619      	mov	r1, r3
 800199a:	4811      	ldr	r0, [pc, #68]	; (80019e0 <MX_TIM4_Init+0xe8>)
 800199c:	f003 fbc4 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80019a6:	f000 f931 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019aa:	2360      	movs	r3, #96	; 0x60
 80019ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM4_Init+0xe8>)
 80019c2:	f002 fddd 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80019cc:	f000 f91e 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM4_Init+0xe8>)
 80019d2:	f000 fa39 	bl	8001e48 <HAL_TIM_MspPostInit>

}
 80019d6:	bf00      	nop
 80019d8:	3738      	adds	r7, #56	; 0x38
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200000c4 	.word	0x200000c4
 80019e4:	40000800 	.word	0x40000800

080019e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
 8001a14:	615a      	str	r2, [r3, #20]
 8001a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ad0 <MX_TIM5_Init+0xe8>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42000;
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a20:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001a24:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b29      	ldr	r3, [pc, #164]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100;
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a2e:	2264      	movs	r2, #100	; 0x64
 8001a30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a3e:	4823      	ldr	r0, [pc, #140]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a40:	f002 faca 	bl	8003fd8 <HAL_TIM_Base_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001a4a:	f000 f8df 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481c      	ldr	r0, [pc, #112]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a5c:	f002 fe56 	bl	800470c <HAL_TIM_ConfigClockSource>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001a66:	f000 f8d1 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a6a:	4818      	ldr	r0, [pc, #96]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a6c:	f002 fadf 	bl	800402e <HAL_TIM_PWM_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001a76:	f000 f8c9 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a82:	f107 0320 	add.w	r3, r7, #32
 8001a86:	4619      	mov	r1, r3
 8001a88:	4810      	ldr	r0, [pc, #64]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001a8a:	f003 fb4d 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001a94:	f000 f8ba 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a98:	2360      	movs	r3, #96	; 0x60
 8001a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2204      	movs	r2, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001ab0:	f002 fd66 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001aba:	f000 f8a7 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001abe:	4803      	ldr	r0, [pc, #12]	; (8001acc <MX_TIM5_Init+0xe4>)
 8001ac0:	f000 f9c2 	bl	8001e48 <HAL_TIM_MspPostInit>

}
 8001ac4:	bf00      	nop
 8001ac6:	3738      	adds	r7, #56	; 0x38
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000158 	.word	0x20000158
 8001ad0:	40000c00 	.word	0x40000c00

08001ad4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <MX_USART2_UART_Init+0x50>)
 8001adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_USART2_UART_Init+0x4c>)
 8001b0c:	f003 fbe0 	bl	80052d0 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b16:	f000 f879 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000026c 	.word	0x2000026c
 8001b24:	40004400 	.word	0x40004400

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <MX_GPIO_Init+0xd8>)
 8001bb6:	f000 fe0b 	bl	80027d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <MX_GPIO_Init+0xdc>)
 8001bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480e      	ldr	r0, [pc, #56]	; (8001c08 <MX_GPIO_Init+0xe0>)
 8001bd0:	f000 fc7c 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001bd4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_GPIO_Init+0xd8>)
 8001bee:	f000 fc6d 	bl	80024cc <HAL_GPIO_Init>

}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	10210000 	.word	0x10210000
 8001c08:	40020800 	.word	0x40020800

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c5a:	2007      	movs	r0, #7
 8001c5c:	f000 fbf4 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800

08001c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_I2C_MspInit+0x84>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12c      	bne.n	8001ce8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001caa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb0:	2312      	movs	r3, #18
 8001cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <HAL_I2C_MspInit+0x8c>)
 8001cc8:	f000 fc00 	bl	80024cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40005400 	.word	0x40005400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020400 	.word	0x40020400

08001cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08e      	sub	sp, #56	; 0x38
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a45      	ldr	r2, [pc, #276]	; (8001e30 <HAL_TIM_Base_MspInit+0x134>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10e      	bne.n	8001d3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
 8001d22:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a43      	ldr	r2, [pc, #268]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d3a:	e074      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d44:	d134      	bne.n	8001db0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
 8001d60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4827      	ldr	r0, [pc, #156]	; (8001e38 <HAL_TIM_Base_MspInit+0x13c>)
 8001d9a:	f000 fb97 	bl	80024cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	201c      	movs	r0, #28
 8001da4:	f000 fb5b 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001da8:	201c      	movs	r0, #28
 8001daa:	f000 fb74 	bl	8002496 <HAL_NVIC_EnableIRQ>
}
 8001dae:	e03a      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <HAL_TIM_Base_MspInit+0x140>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10e      	bne.n	8001dd8 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
}
 8001dd6:	e026      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM4)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_TIM_Base_MspInit+0x144>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d10e      	bne.n	8001e00 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
}
 8001dfe:	e012      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM5)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_TIM_Base_MspInit+0x148>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10d      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_TIM_Base_MspInit+0x138>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
}
 8001e26:	bf00      	nop
 8001e28:	3738      	adds	r7, #56	; 0x38
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40000c00 	.word	0x40000c00

08001e48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <HAL_TIM_MspPostInit+0x140>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d11f      	bne.n	8001eaa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a46      	ldr	r2, [pc, #280]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	483b      	ldr	r0, [pc, #236]	; (8001f90 <HAL_TIM_MspPostInit+0x148>)
 8001ea4:	f000 fb12 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ea8:	e06a      	b.n	8001f80 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a39      	ldr	r2, [pc, #228]	; (8001f94 <HAL_TIM_MspPostInit+0x14c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d11e      	bne.n	8001ef2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	4a33      	ldr	r2, [pc, #204]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	482b      	ldr	r0, [pc, #172]	; (8001f98 <HAL_TIM_MspPostInit+0x150>)
 8001eec:	f000 faee 	bl	80024cc <HAL_GPIO_Init>
}
 8001ef0:	e046      	b.n	8001f80 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_TIM_MspPostInit+0x154>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d11e      	bne.n	8001f3a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4a21      	ldr	r2, [pc, #132]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f18:	2340      	movs	r3, #64	; 0x40
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	481b      	ldr	r0, [pc, #108]	; (8001fa0 <HAL_TIM_MspPostInit+0x158>)
 8001f34:	f000 faca 	bl	80024cc <HAL_GPIO_Init>
}
 8001f38:	e022      	b.n	8001f80 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_TIM_MspPostInit+0x15c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d11d      	bne.n	8001f80 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6313      	str	r3, [r2, #48]	; 0x30
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_TIM_MspPostInit+0x144>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f70:	2302      	movs	r3, #2
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <HAL_TIM_MspPostInit+0x148>)
 8001f7c:	f000 faa6 	bl	80024cc <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3730      	adds	r7, #48	; 0x30
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40000c00 	.word	0x40000c00

08001fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_UART_MspInit+0x84>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12b      	bne.n	8002022 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_UART_MspInit+0x88>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_UART_MspInit+0x88>)
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_UART_MspInit+0x88>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_UART_MspInit+0x88>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_UART_MspInit+0x88>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_UART_MspInit+0x88>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002002:	230c      	movs	r3, #12
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002012:	2307      	movs	r3, #7
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <HAL_UART_MspInit+0x8c>)
 800201e:	f000 fa55 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40004400 	.word	0x40004400
 8002030:	40023800 	.word	0x40023800
 8002034:	40020000 	.word	0x40020000

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <MemManage_Handler+0x4>

08002052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <BusFault_Handler+0x4>

08002058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <UsageFault_Handler+0x4>

0800205e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208c:	f000 f8ca 	bl	8002224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <TIM2_IRQHandler+0x10>)
 800209a:	f002 f8cd 	bl	8004238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000022c 	.word	0x2000022c

080020a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <_sbrk+0x50>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x16>
		heap_end = &end;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <_sbrk+0x50>)
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <_sbrk+0x54>)
 80020bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <_sbrk+0x50>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <_sbrk+0x50>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	466a      	mov	r2, sp
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d907      	bls.n	80020e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020d2:	f003 fda9 	bl	8005c28 <__errno>
 80020d6:	4602      	mov	r2, r0
 80020d8:	230c      	movs	r3, #12
 80020da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e0:	e006      	b.n	80020f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <_sbrk+0x50>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <_sbrk+0x50>)
 80020ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200000b8 	.word	0x200000b8
 80020fc:	200002b8 	.word	0x200002b8

08002100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <SystemInit+0x28>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <SystemInit+0x28>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SystemInit+0x28>)
 8002116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800211a:	609a      	str	r2, [r3, #8]
#endif
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800212c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002164 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002130:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002132:	e003      	b.n	800213c <LoopCopyDataInit>

08002134 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002136:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002138:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800213a:	3104      	adds	r1, #4

0800213c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800213c:	480b      	ldr	r0, [pc, #44]	; (800216c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002140:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002142:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002144:	d3f6      	bcc.n	8002134 <CopyDataInit>
  ldr  r2, =_sbss
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002148:	e002      	b.n	8002150 <LoopFillZerobss>

0800214a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800214a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800214c:	f842 3b04 	str.w	r3, [r2], #4

08002150 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002152:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002154:	d3f9      	bcc.n	800214a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002156:	f7ff ffd3 	bl	8002100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215a:	f003 fd6b 	bl	8005c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215e:	f7ff f92f 	bl	80013c0 <main>
  bx  lr    
 8002162:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002164:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002168:	0800652c 	.word	0x0800652c
  ldr  r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002170:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002174:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002178:	200002b4 	.word	0x200002b4

0800217c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_Init+0x40>)
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_Init+0x40>)
 8002196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_Init+0x40>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a8:	2003      	movs	r0, #3
 80021aa:	f000 f94d 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f000 f808 	bl	80021c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b4:	f7ff fd32 	bl	8001c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023c00 	.word	0x40023c00

080021c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_InitTick+0x54>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_InitTick+0x58>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021da:	fbb3 f3f1 	udiv	r3, r3, r1
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f965 	bl	80024b2 <HAL_SYSTICK_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00e      	b.n	8002210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b0f      	cmp	r3, #15
 80021f6:	d80a      	bhi.n	800220e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f8:	2200      	movs	r2, #0
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002200:	f000 f92d 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002204:	4a06      	ldr	r2, [pc, #24]	; (8002220 <HAL_InitTick+0x5c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000008 	.word	0x20000008
 800221c:	20000010 	.word	0x20000010
 8002220:	2000000c 	.word	0x2000000c

08002224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x20>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_IncTick+0x24>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_IncTick+0x24>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000010 	.word	0x20000010
 8002248:	200002ac 	.word	0x200002ac

0800224c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_GetTick+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	200002ac 	.word	0x200002ac

08002264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff ffee 	bl	800224c <HAL_GetTick>
 8002270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800227c:	d005      	beq.n	800228a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_Delay+0x40>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800228a:	bf00      	nop
 800228c:	f7ff ffde 	bl	800224c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	429a      	cmp	r2, r3
 800229a:	d8f7      	bhi.n	800228c <HAL_Delay+0x28>
  {
  }
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000010 	.word	0x20000010

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002428:	f7ff ff8e 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff29 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff3e 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff8e 	bl	800239c <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff31 	bl	800230c <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa2 	bl	8002404 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e159      	b.n	800279c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	f040 8148 	bne.w	8002796 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d00b      	beq.n	8002526 <HAL_GPIO_Init+0x5a>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d007      	beq.n	8002526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800251a:	2b11      	cmp	r3, #17
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b12      	cmp	r3, #18
 8002524:	d130      	bne.n	8002588 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 0201 	and.w	r2, r3, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0xfc>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b12      	cmp	r3, #18
 80025c6:	d123      	bne.n	8002610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	69b9      	ldr	r1, [r7, #24]
 800260c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0203 	and.w	r2, r3, #3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a2 	beq.w	8002796 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_GPIO_Init+0x2e4>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a55      	ldr	r2, [pc, #340]	; (80027b0 <HAL_GPIO_Init+0x2e4>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_GPIO_Init+0x2e4>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800266e:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <HAL_GPIO_Init+0x2e8>)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a48      	ldr	r2, [pc, #288]	; (80027b8 <HAL_GPIO_Init+0x2ec>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d019      	beq.n	80026ce <HAL_GPIO_Init+0x202>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a47      	ldr	r2, [pc, #284]	; (80027bc <HAL_GPIO_Init+0x2f0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0x1fe>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a46      	ldr	r2, [pc, #280]	; (80027c0 <HAL_GPIO_Init+0x2f4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00d      	beq.n	80026c6 <HAL_GPIO_Init+0x1fa>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a45      	ldr	r2, [pc, #276]	; (80027c4 <HAL_GPIO_Init+0x2f8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d007      	beq.n	80026c2 <HAL_GPIO_Init+0x1f6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a44      	ldr	r2, [pc, #272]	; (80027c8 <HAL_GPIO_Init+0x2fc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_GPIO_Init+0x1f2>
 80026ba:	2304      	movs	r3, #4
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026be:	2307      	movs	r3, #7
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x204>
 80026ce:	2300      	movs	r3, #0
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e0:	4934      	ldr	r1, [pc, #208]	; (80027b4 <HAL_GPIO_Init+0x2e8>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_GPIO_Init+0x300>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002712:	4a2e      	ldr	r2, [pc, #184]	; (80027cc <HAL_GPIO_Init+0x300>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002718:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <HAL_GPIO_Init+0x300>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273c:	4a23      	ldr	r2, [pc, #140]	; (80027cc <HAL_GPIO_Init+0x300>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_GPIO_Init+0x300>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_GPIO_Init+0x300>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_GPIO_Init+0x300>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_GPIO_Init+0x300>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	f67f aea2 	bls.w	80024e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	3724      	adds	r7, #36	; 0x24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40013c00 	.word	0x40013c00

080027d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e0:	787b      	ldrb	r3, [r7, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027ec:	e003      	b.n	80027f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	619a      	str	r2, [r3, #24]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e11f      	b.n	8002a56 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fa1e 	bl	8001c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	; 0x24
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002868:	f001 fb8e 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 800286c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a7b      	ldr	r2, [pc, #492]	; (8002a60 <HAL_I2C_Init+0x25c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d807      	bhi.n	8002888 <HAL_I2C_Init+0x84>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a7a      	ldr	r2, [pc, #488]	; (8002a64 <HAL_I2C_Init+0x260>)
 800287c:	4293      	cmp	r3, r2
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e006      	b.n	8002896 <HAL_I2C_Init+0x92>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a77      	ldr	r2, [pc, #476]	; (8002a68 <HAL_I2C_Init+0x264>)
 800288c:	4293      	cmp	r3, r2
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0db      	b.n	8002a56 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a72      	ldr	r2, [pc, #456]	; (8002a6c <HAL_I2C_Init+0x268>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0c9b      	lsrs	r3, r3, #18
 80028a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a64      	ldr	r2, [pc, #400]	; (8002a60 <HAL_I2C_Init+0x25c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d802      	bhi.n	80028d8 <HAL_I2C_Init+0xd4>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3301      	adds	r3, #1
 80028d6:	e009      	b.n	80028ec <HAL_I2C_Init+0xe8>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	4a63      	ldr	r2, [pc, #396]	; (8002a70 <HAL_I2C_Init+0x26c>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	3301      	adds	r3, #1
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4956      	ldr	r1, [pc, #344]	; (8002a60 <HAL_I2C_Init+0x25c>)
 8002908:	428b      	cmp	r3, r1
 800290a:	d80d      	bhi.n	8002928 <HAL_I2C_Init+0x124>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1e59      	subs	r1, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fbb1 f3f3 	udiv	r3, r1, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	2b04      	cmp	r3, #4
 8002922:	bf38      	it	cc
 8002924:	2304      	movcc	r3, #4
 8002926:	e04f      	b.n	80029c8 <HAL_I2C_Init+0x1c4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d111      	bne.n	8002954 <HAL_I2C_Init+0x150>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e58      	subs	r0, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e012      	b.n	800297a <HAL_I2C_Init+0x176>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e58      	subs	r0, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	0099      	lsls	r1, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	fbb0 f3f3 	udiv	r3, r0, r3
 800296a:	3301      	adds	r3, #1
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Init+0x17e>
 800297e:	2301      	movs	r3, #1
 8002980:	e022      	b.n	80029c8 <HAL_I2C_Init+0x1c4>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10e      	bne.n	80029a8 <HAL_I2C_Init+0x1a4>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1e58      	subs	r0, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	440b      	add	r3, r1
 8002998:	fbb0 f3f3 	udiv	r3, r0, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a6:	e00f      	b.n	80029c8 <HAL_I2C_Init+0x1c4>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e58      	subs	r0, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	0099      	lsls	r1, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	6809      	ldr	r1, [r1, #0]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6911      	ldr	r1, [r2, #16]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68d2      	ldr	r2, [r2, #12]
 8002a02:	4311      	orrs	r1, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	000186a0 	.word	0x000186a0
 8002a64:	001e847f 	.word	0x001e847f
 8002a68:	003d08ff 	.word	0x003d08ff
 8002a6c:	431bde83 	.word	0x431bde83
 8002a70:	10624dd3 	.word	0x10624dd3

08002a74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	460b      	mov	r3, r1
 8002a82:	817b      	strh	r3, [r7, #10]
 8002a84:	4613      	mov	r3, r2
 8002a86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff fbe0 	bl	800224c <HAL_GetTick>
 8002a8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	f040 80e0 	bne.w	8002c5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2319      	movs	r3, #25
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4970      	ldr	r1, [pc, #448]	; (8002c68 <HAL_I2C_Master_Transmit+0x1f4>)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fc56 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e0d3      	b.n	8002c5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_I2C_Master_Transmit+0x50>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e0cc      	b.n	8002c5e <HAL_I2C_Master_Transmit+0x1ea>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d007      	beq.n	8002aea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2221      	movs	r2, #33	; 0x21
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2210      	movs	r2, #16
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	893a      	ldrh	r2, [r7, #8]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a50      	ldr	r2, [pc, #320]	; (8002c6c <HAL_I2C_Master_Transmit+0x1f8>)
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b2c:	8979      	ldrh	r1, [r7, #10]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	6a3a      	ldr	r2, [r7, #32]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fac2 	bl	80030bc <I2C_MasterRequestWrite>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e08d      	b.n	8002c5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b58:	e066      	b.n	8002c28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	6a39      	ldr	r1, [r7, #32]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fcd0 	bl	8003504 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d107      	bne.n	8002b82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e06b      	b.n	8002c5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	781a      	ldrb	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d11b      	bne.n	8002bfc <HAL_I2C_Master_Transmit+0x188>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d017      	beq.n	8002bfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	6a39      	ldr	r1, [r7, #32]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fcc0 	bl	8003586 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d107      	bne.n	8002c24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e01a      	b.n	8002c5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d194      	bne.n	8002b5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	00100002 	.word	0x00100002
 8002c6c:	ffff0000 	.word	0xffff0000

08002c70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	; 0x30
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	817b      	strh	r3, [r7, #10]
 8002c80:	4613      	mov	r3, r2
 8002c82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff fae2 	bl	800224c <HAL_GetTick>
 8002c88:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	f040 820b 	bne.w	80030ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2319      	movs	r3, #25
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	497c      	ldr	r1, [pc, #496]	; (8002e94 <HAL_I2C_Master_Receive+0x224>)
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fb58 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e1fe      	b.n	80030b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_I2C_Master_Receive+0x50>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e1f7      	b.n	80030b0 <HAL_I2C_Master_Receive+0x440>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d007      	beq.n	8002ce6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2222      	movs	r2, #34	; 0x22
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2210      	movs	r2, #16
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	893a      	ldrh	r2, [r7, #8]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a5c      	ldr	r2, [pc, #368]	; (8002e98 <HAL_I2C_Master_Receive+0x228>)
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d28:	8979      	ldrh	r1, [r7, #10]
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa46 	bl	80031c0 <I2C_MasterRequestRead>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e1b8      	b.n	80030b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d113      	bne.n	8002d6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e18c      	b.n	8003088 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d11b      	bne.n	8002dae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e16c      	b.n	8003088 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d11b      	bne.n	8002dee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	e14c      	b.n	8003088 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e14:	e138      	b.n	8003088 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	f200 80f1 	bhi.w	8003002 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d123      	bne.n	8002e70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fbeb 	bl	8003608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e139      	b.n	80030b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e6e:	e10b      	b.n	8003088 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d14e      	bne.n	8002f16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4906      	ldr	r1, [pc, #24]	; (8002e9c <HAL_I2C_Master_Receive+0x22c>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fa68 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e10e      	b.n	80030b0 <HAL_I2C_Master_Receive+0x440>
 8002e92:	bf00      	nop
 8002e94:	00100002 	.word	0x00100002
 8002e98:	ffff0000 	.word	0xffff0000
 8002e9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f14:	e0b8      	b.n	8003088 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4966      	ldr	r1, [pc, #408]	; (80030b8 <HAL_I2C_Master_Receive+0x448>)
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fa19 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0bf      	b.n	80030b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	2200      	movs	r2, #0
 8002f7a:	494f      	ldr	r1, [pc, #316]	; (80030b8 <HAL_I2C_Master_Receive+0x448>)
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f9eb 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e091      	b.n	80030b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003000:	e042      	b.n	8003088 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fafe 	bl	8003608 <I2C_WaitOnRXNEFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e04c      	b.n	80030b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d118      	bne.n	8003088 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	f47f aec2 	bne.w	8002e16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3728      	adds	r7, #40	; 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	00010004 	.word	0x00010004

080030bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d006      	beq.n	80030e6 <I2C_MasterRequestWrite+0x2a>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d003      	beq.n	80030e6 <I2C_MasterRequestWrite+0x2a>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030e4:	d108      	bne.n	80030f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	e00b      	b.n	8003110 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	2b12      	cmp	r3, #18
 80030fe:	d107      	bne.n	8003110 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f91b 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00c      	beq.n	8003142 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e035      	b.n	80031ae <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800314a:	d108      	bne.n	800315e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800315a:	611a      	str	r2, [r3, #16]
 800315c:	e01b      	b.n	8003196 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	11db      	asrs	r3, r3, #7
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 0306 	and.w	r3, r3, #6
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f063 030f 	orn	r3, r3, #15
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	490f      	ldr	r1, [pc, #60]	; (80031b8 <I2C_MasterRequestWrite+0xfc>)
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f942 	bl	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e010      	b.n	80031ae <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800318c:	897b      	ldrh	r3, [r7, #10]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4908      	ldr	r1, [pc, #32]	; (80031bc <I2C_MasterRequestWrite+0x100>)
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f932 	bl	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	00010008 	.word	0x00010008
 80031bc:	00010002 	.word	0x00010002

080031c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	460b      	mov	r3, r1
 80031ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d006      	beq.n	80031fa <I2C_MasterRequestRead+0x3a>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d003      	beq.n	80031fa <I2C_MasterRequestRead+0x3a>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f8:	d108      	bne.n	800320c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e00b      	b.n	8003224 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	2b11      	cmp	r3, #17
 8003212:	d107      	bne.n	8003224 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003222:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f891 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00c      	beq.n	8003256 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e078      	b.n	8003348 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325e:	d108      	bne.n	8003272 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003260:	897b      	ldrh	r3, [r7, #10]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]
 8003270:	e05e      	b.n	8003330 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	11db      	asrs	r3, r3, #7
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 0306 	and.w	r3, r3, #6
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f063 030f 	orn	r3, r3, #15
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4930      	ldr	r1, [pc, #192]	; (8003350 <I2C_MasterRequestRead+0x190>)
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f8b8 	bl	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e053      	b.n	8003348 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032a0:	897b      	ldrh	r3, [r7, #10]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4929      	ldr	r1, [pc, #164]	; (8003354 <I2C_MasterRequestRead+0x194>)
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f8a8 	bl	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e043      	b.n	8003348 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f830 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00c      	beq.n	8003318 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e017      	b.n	8003348 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003318:	897b      	ldrh	r3, [r7, #10]
 800331a:	11db      	asrs	r3, r3, #7
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0306 	and.w	r3, r3, #6
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f063 030e 	orn	r3, r3, #14
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <I2C_MasterRequestRead+0x194>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f865 	bl	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	00010008 	.word	0x00010008
 8003354:	00010002 	.word	0x00010002

08003358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003368:	e025      	b.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003370:	d021      	beq.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7fe ff6b 	bl	800224c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d116      	bne.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e023      	b.n	80033fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d10d      	bne.n	80033dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4013      	ands	r3, r2
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bf0c      	ite	eq
 80033d2:	2301      	moveq	r3, #1
 80033d4:	2300      	movne	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	e00c      	b.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf0c      	ite	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	2300      	movne	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d0b6      	beq.n	800336a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003414:	e051      	b.n	80034ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003424:	d123      	bne.n	800346e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003434:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800343e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0204 	orr.w	r2, r3, #4
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e046      	b.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003474:	d021      	beq.n	80034ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe fee9 	bl	800224c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d116      	bne.n	80034ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f043 0220 	orr.w	r2, r3, #32
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e020      	b.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10c      	bne.n	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4013      	ands	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	e00b      	b.n	80034f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d18d      	bne.n	8003416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003510:	e02d      	b.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f8ce 	bl	80036b4 <I2C_IsAcknowledgeFailed>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e02d      	b.n	800357e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003528:	d021      	beq.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fe fe8f 	bl	800224c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d116      	bne.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e007      	b.n	800357e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d1ca      	bne.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003592:	e02d      	b.n	80035f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f88d 	bl	80036b4 <I2C_IsAcknowledgeFailed>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e02d      	b.n	8003600 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035aa:	d021      	beq.n	80035f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ac:	f7fe fe4e 	bl	800224c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d302      	bcc.n	80035c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d116      	bne.n	80035f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f043 0220 	orr.w	r2, r3, #32
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e007      	b.n	8003600 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d1ca      	bne.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003614:	e042      	b.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b10      	cmp	r3, #16
 8003622:	d119      	bne.n	8003658 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0210 	mvn.w	r2, #16
 800362c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e029      	b.n	80036ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003658:	f7fe fdf8 	bl	800224c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e007      	b.n	80036ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d1b5      	bne.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ca:	d11b      	bne.n	8003704 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f043 0204 	orr.w	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e25b      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d075      	beq.n	800381e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003732:	4ba3      	ldr	r3, [pc, #652]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b04      	cmp	r3, #4
 800373c:	d00c      	beq.n	8003758 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373e:	4ba0      	ldr	r3, [pc, #640]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003746:	2b08      	cmp	r3, #8
 8003748:	d112      	bne.n	8003770 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4b9d      	ldr	r3, [pc, #628]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003756:	d10b      	bne.n	8003770 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4b99      	ldr	r3, [pc, #612]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05b      	beq.n	800381c <HAL_RCC_OscConfig+0x108>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d157      	bne.n	800381c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e236      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d106      	bne.n	8003788 <HAL_RCC_OscConfig+0x74>
 800377a:	4b91      	ldr	r3, [pc, #580]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a90      	ldr	r2, [pc, #576]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e01d      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x98>
 8003792:	4b8b      	ldr	r3, [pc, #556]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a8a      	ldr	r2, [pc, #552]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a87      	ldr	r2, [pc, #540]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 80037ac:	4b84      	ldr	r3, [pc, #528]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a83      	ldr	r2, [pc, #524]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b81      	ldr	r3, [pc, #516]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a80      	ldr	r2, [pc, #512]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe fd3e 	bl	800224c <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe fd3a 	bl	800224c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e1fb      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0xc0>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fe fd2a 	bl	800224c <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fe fd26 	bl	800224c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e1e7      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380e:	4b6c      	ldr	r3, [pc, #432]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0xe8>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d063      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382a:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003836:	4b62      	ldr	r3, [pc, #392]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800383e:	2b08      	cmp	r3, #8
 8003840:	d11c      	bne.n	800387c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003842:	4b5f      	ldr	r3, [pc, #380]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d116      	bne.n	800387c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	4b5c      	ldr	r3, [pc, #368]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_RCC_OscConfig+0x152>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e1bb      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003866:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4952      	ldr	r1, [pc, #328]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387a:	e03a      	b.n	80038f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003884:	4b4f      	ldr	r3, [pc, #316]	; (80039c4 <HAL_RCC_OscConfig+0x2b0>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fe fcdf 	bl	800224c <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003892:	f7fe fcdb 	bl	800224c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e19c      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4940      	ldr	r1, [pc, #256]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	600b      	str	r3, [r1, #0]
 80038c4:	e015      	b.n	80038f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c6:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <HAL_RCC_OscConfig+0x2b0>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe fcbe 	bl	800224c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d4:	f7fe fcba 	bl	800224c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e17b      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e6:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d030      	beq.n	8003960 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d016      	beq.n	8003934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003906:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_RCC_OscConfig+0x2b4>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe fc9e 	bl	800224c <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003914:	f7fe fc9a 	bl	800224c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e15b      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x200>
 8003932:	e015      	b.n	8003960 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003934:	4b24      	ldr	r3, [pc, #144]	; (80039c8 <HAL_RCC_OscConfig+0x2b4>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393a:	f7fe fc87 	bl	800224c <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003942:	f7fe fc83 	bl	800224c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e144      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a0 	beq.w	8003aae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003972:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398c:	6413      	str	r3, [r2, #64]	; 0x40
 800398e:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_OscConfig+0x2b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d121      	bne.n	80039ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_RCC_OscConfig+0x2b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a07      	ldr	r2, [pc, #28]	; (80039cc <HAL_RCC_OscConfig+0x2b8>)
 80039b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b6:	f7fe fc49 	bl	800224c <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	e011      	b.n	80039e2 <HAL_RCC_OscConfig+0x2ce>
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470000 	.word	0x42470000
 80039c8:	42470e80 	.word	0x42470e80
 80039cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d0:	f7fe fc3c 	bl	800224c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e0fd      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x4d4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d106      	bne.n	8003a04 <HAL_RCC_OscConfig+0x2f0>
 80039f6:	4b7d      	ldr	r3, [pc, #500]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	4a7c      	ldr	r2, [pc, #496]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
 8003a02:	e01c      	b.n	8003a3e <HAL_RCC_OscConfig+0x32a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d10c      	bne.n	8003a26 <HAL_RCC_OscConfig+0x312>
 8003a0c:	4b77      	ldr	r3, [pc, #476]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	4a76      	ldr	r2, [pc, #472]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	6713      	str	r3, [r2, #112]	; 0x70
 8003a18:	4b74      	ldr	r3, [pc, #464]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a73      	ldr	r2, [pc, #460]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	e00b      	b.n	8003a3e <HAL_RCC_OscConfig+0x32a>
 8003a26:	4b71      	ldr	r3, [pc, #452]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a70      	ldr	r2, [pc, #448]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70
 8003a32:	4b6e      	ldr	r3, [pc, #440]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a6d      	ldr	r2, [pc, #436]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d015      	beq.n	8003a72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a46:	f7fe fc01 	bl	800224c <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4e:	f7fe fbfd 	bl	800224c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0bc      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a64:	4b61      	ldr	r3, [pc, #388]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ee      	beq.n	8003a4e <HAL_RCC_OscConfig+0x33a>
 8003a70:	e014      	b.n	8003a9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a72:	f7fe fbeb 	bl	800224c <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fe fbe7 	bl	800224c <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0a6      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a90:	4b56      	ldr	r3, [pc, #344]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ee      	bne.n	8003a7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d105      	bne.n	8003aae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa2:	4b52      	ldr	r3, [pc, #328]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	4a51      	ldr	r2, [pc, #324]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8092 	beq.w	8003bdc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d05c      	beq.n	8003b7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d141      	bne.n	8003b50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003acc:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <HAL_RCC_OscConfig+0x4dc>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe fbbb 	bl	800224c <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fe fbb7 	bl	800224c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e078      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aec:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	019b      	lsls	r3, r3, #6
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	3b01      	subs	r3, #1
 8003b12:	041b      	lsls	r3, r3, #16
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	4933      	ldr	r1, [pc, #204]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b22:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fe fb90 	bl	800224c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b30:	f7fe fb8c 	bl	800224c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e04d      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x41c>
 8003b4e:	e045      	b.n	8003bdc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b50:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fe fb79 	bl	800224c <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5e:	f7fe fb75 	bl	800224c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e036      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0x44a>
 8003b7c:	e02e      	b.n	8003bdc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e029      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b8a:	4b18      	ldr	r3, [pc, #96]	; (8003bec <HAL_RCC_OscConfig+0x4d8>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d115      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d106      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40007000 	.word	0x40007000
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	42470060 	.word	0x42470060

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0cc      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b68      	ldr	r3, [pc, #416]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d90c      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b65      	ldr	r3, [pc, #404]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a52      	ldr	r2, [pc, #328]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	494d      	ldr	r1, [pc, #308]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d044      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d119      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e067      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd2:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4934      	ldr	r1, [pc, #208]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce4:	f7fe fab2 	bl	800224c <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fe faae 	bl	800224c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e04f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 020c 	and.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1eb      	bne.n	8003cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d20c      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b22      	ldr	r3, [pc, #136]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4916      	ldr	r1, [pc, #88]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fa12 	bl	80021c4 <HAL_InitTick>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40023c00 	.word	0x40023c00
 8003db0:	40023800 	.word	0x40023800
 8003db4:	080064d0 	.word	0x080064d0
 8003db8:	20000008 	.word	0x20000008
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d007      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x32>
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d008      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x38>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f040 80b4 	bne.w	8003f54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b5e      	ldr	r3, [pc, #376]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003dee:	60bb      	str	r3, [r7, #8]
       break;
 8003df0:	e0b3      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df2:	4b5e      	ldr	r3, [pc, #376]	; (8003f6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003df4:	60bb      	str	r3, [r7, #8]
      break;
 8003df6:	e0b0      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df8:	4b5a      	ldr	r3, [pc, #360]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e02:	4b58      	ldr	r3, [pc, #352]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04a      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0e:	4b55      	ldr	r3, [pc, #340]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	099b      	lsrs	r3, r3, #6
 8003e14:	f04f 0400 	mov.w	r4, #0
 8003e18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	ea03 0501 	and.w	r5, r3, r1
 8003e24:	ea04 0602 	and.w	r6, r4, r2
 8003e28:	4629      	mov	r1, r5
 8003e2a:	4632      	mov	r2, r6
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	f04f 0400 	mov.w	r4, #0
 8003e34:	0154      	lsls	r4, r2, #5
 8003e36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e3a:	014b      	lsls	r3, r1, #5
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4622      	mov	r2, r4
 8003e40:	1b49      	subs	r1, r1, r5
 8003e42:	eb62 0206 	sbc.w	r2, r2, r6
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	f04f 0400 	mov.w	r4, #0
 8003e4e:	0194      	lsls	r4, r2, #6
 8003e50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e54:	018b      	lsls	r3, r1, #6
 8003e56:	1a5b      	subs	r3, r3, r1
 8003e58:	eb64 0402 	sbc.w	r4, r4, r2
 8003e5c:	f04f 0100 	mov.w	r1, #0
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	00e2      	lsls	r2, r4, #3
 8003e66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e6a:	00d9      	lsls	r1, r3, #3
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4614      	mov	r4, r2
 8003e70:	195b      	adds	r3, r3, r5
 8003e72:	eb44 0406 	adc.w	r4, r4, r6
 8003e76:	f04f 0100 	mov.w	r1, #0
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	0262      	lsls	r2, r4, #9
 8003e80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e84:	0259      	lsls	r1, r3, #9
 8003e86:	460b      	mov	r3, r1
 8003e88:	4614      	mov	r4, r2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f04f 0400 	mov.w	r4, #0
 8003e94:	461a      	mov	r2, r3
 8003e96:	4623      	mov	r3, r4
 8003e98:	f7fc fe78 	bl	8000b8c <__aeabi_uldivmod>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e049      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea4:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	f04f 0400 	mov.w	r4, #0
 8003eae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	ea03 0501 	and.w	r5, r3, r1
 8003eba:	ea04 0602 	and.w	r6, r4, r2
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	f04f 0400 	mov.w	r4, #0
 8003eca:	0154      	lsls	r4, r2, #5
 8003ecc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ed0:	014b      	lsls	r3, r1, #5
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	1b49      	subs	r1, r1, r5
 8003ed8:	eb62 0206 	sbc.w	r2, r2, r6
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	f04f 0400 	mov.w	r4, #0
 8003ee4:	0194      	lsls	r4, r2, #6
 8003ee6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003eea:	018b      	lsls	r3, r1, #6
 8003eec:	1a5b      	subs	r3, r3, r1
 8003eee:	eb64 0402 	sbc.w	r4, r4, r2
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	00e2      	lsls	r2, r4, #3
 8003efc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f00:	00d9      	lsls	r1, r3, #3
 8003f02:	460b      	mov	r3, r1
 8003f04:	4614      	mov	r4, r2
 8003f06:	195b      	adds	r3, r3, r5
 8003f08:	eb44 0406 	adc.w	r4, r4, r6
 8003f0c:	f04f 0100 	mov.w	r1, #0
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	02a2      	lsls	r2, r4, #10
 8003f16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f1a:	0299      	lsls	r1, r3, #10
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4614      	mov	r4, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	4621      	mov	r1, r4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f04f 0400 	mov.w	r4, #0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	f7fc fe2d 	bl	8000b8c <__aeabi_uldivmod>
 8003f32:	4603      	mov	r3, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f38:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	3301      	adds	r3, #1
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	60bb      	str	r3, [r7, #8]
      break;
 8003f52:	e002      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f56:	60bb      	str	r3, [r7, #8]
      break;
 8003f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	00f42400 	.word	0x00f42400
 8003f6c:	007a1200 	.word	0x007a1200

08003f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f76:	681b      	ldr	r3, [r3, #0]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000008 	.word	0x20000008

08003f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f8c:	f7ff fff0 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003f90:	4601      	mov	r1, r0
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0a9b      	lsrs	r3, r3, #10
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4a03      	ldr	r2, [pc, #12]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f9e:	5cd3      	ldrb	r3, [r2, r3]
 8003fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	080064e0 	.word	0x080064e0

08003fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fb4:	f7ff ffdc 	bl	8003f70 <HAL_RCC_GetHCLKFreq>
 8003fb8:	4601      	mov	r1, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	0b5b      	lsrs	r3, r3, #13
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4a03      	ldr	r2, [pc, #12]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc6:	5cd3      	ldrb	r3, [r2, r3]
 8003fc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	080064e0 	.word	0x080064e0

08003fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e01d      	b.n	8004026 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fe7c 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fc9c 	bl	8004954 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e01d      	b.n	800407c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f815 	bl	8004084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f000 fc71 	bl	8004954 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2201      	movs	r2, #1
 80040a8:	6839      	ldr	r1, [r7, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 f816 	bl	80050dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <HAL_TIM_PWM_Start+0x60>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d107      	bne.n	80040ca <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b06      	cmp	r3, #6
 80040da:	d007      	beq.n	80040ec <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000

080040fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e01d      	b.n	800414a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f815 	bl	8004152 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f000 fc0a 	bl	8004954 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b0c      	cmp	r3, #12
 8004176:	d841      	bhi.n	80041fc <HAL_TIM_IC_Start_IT+0x94>
 8004178:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <HAL_TIM_IC_Start_IT+0x18>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080041fd 	.word	0x080041fd
 8004188:	080041fd 	.word	0x080041fd
 800418c:	080041fd 	.word	0x080041fd
 8004190:	080041c7 	.word	0x080041c7
 8004194:	080041fd 	.word	0x080041fd
 8004198:	080041fd 	.word	0x080041fd
 800419c:	080041fd 	.word	0x080041fd
 80041a0:	080041d9 	.word	0x080041d9
 80041a4:	080041fd 	.word	0x080041fd
 80041a8:	080041fd 	.word	0x080041fd
 80041ac:	080041fd 	.word	0x080041fd
 80041b0:	080041eb 	.word	0x080041eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0202 	orr.w	r2, r2, #2
 80041c2:	60da      	str	r2, [r3, #12]
      break;
 80041c4:	e01b      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0204 	orr.w	r2, r2, #4
 80041d4:	60da      	str	r2, [r3, #12]
      break;
 80041d6:	e012      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0208 	orr.w	r2, r2, #8
 80041e6:	60da      	str	r2, [r3, #12]
      break;
 80041e8:	e009      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0210 	orr.w	r2, r2, #16
 80041f8:	60da      	str	r2, [r3, #12]
      break;
 80041fa:	e000      	b.n	80041fe <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80041fc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2201      	movs	r2, #1
 8004204:	6839      	ldr	r1, [r7, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 ff68 	bl	80050dc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b06      	cmp	r3, #6
 800421c:	d007      	beq.n	800422e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0201 	orr.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b02      	cmp	r3, #2
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b02      	cmp	r3, #2
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0202 	mvn.w	r2, #2
 8004264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc fe06 	bl	8000e8c <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fb48 	bl	8004918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fb4f 	bl	800492c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d122      	bne.n	80042e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d11b      	bne.n	80042e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0204 	mvn.w	r2, #4
 80042b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fc fddc 	bl	8000e8c <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fb1e 	bl	8004918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fb25 	bl	800492c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0208 	mvn.w	r2, #8
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2204      	movs	r2, #4
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc fdb2 	bl	8000e8c <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 faf4 	bl	8004918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fafb 	bl	800492c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b10      	cmp	r3, #16
 8004348:	d122      	bne.n	8004390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	d11b      	bne.n	8004390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0210 	mvn.w	r2, #16
 8004360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2208      	movs	r2, #8
 8004366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fd88 	bl	8000e8c <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 faca 	bl	8004918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fad1 	bl	800492c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10e      	bne.n	80043bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0201 	mvn.w	r2, #1
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 faa4 	bl	8004904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b80      	cmp	r3, #128	; 0x80
 80043c8:	d10e      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	2b80      	cmp	r3, #128	; 0x80
 80043d6:	d107      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 ff6a 	bl	80052bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d10e      	bne.n	8004414 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d107      	bne.n	8004414 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa96 	bl	8004940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b20      	cmp	r3, #32
 8004420:	d10e      	bne.n	8004440 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b20      	cmp	r3, #32
 800442e:	d107      	bne.n	8004440 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0220 	mvn.w	r2, #32
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 ff34 	bl	80052a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_TIM_IC_ConfigChannel+0x1a>
 800445e:	2302      	movs	r3, #2
 8004460:	e08a      	b.n	8004578 <HAL_TIM_IC_ConfigChannel+0x130>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f000 fc70 	bl	8004d6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 020c 	bic.w	r2, r2, #12
 800449a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	619a      	str	r2, [r3, #24]
 80044ae:	e05a      	b.n	8004566 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d11c      	bne.n	80044f0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f000 fce8 	bl	8004e9a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699a      	ldr	r2, [r3, #24]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6999      	ldr	r1, [r3, #24]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	021a      	lsls	r2, r3, #8
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]
 80044ee:	e03a      	b.n	8004566 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d11b      	bne.n	800452e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f000 fd35 	bl	8004f74 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 020c 	bic.w	r2, r2, #12
 8004518:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69d9      	ldr	r1, [r3, #28]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	61da      	str	r2, [r3, #28]
 800452c:	e01b      	b.n	8004566 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f000 fd55 	bl	8004fec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004550:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69d9      	ldr	r1, [r3, #28]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	021a      	lsls	r2, r3, #8
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004596:	2302      	movs	r3, #2
 8004598:	e0b4      	b.n	8004704 <HAL_TIM_PWM_ConfigChannel+0x184>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	f200 809f 	bhi.w	80046f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	080046f1 	.word	0x080046f1
 80045c0:	080046f1 	.word	0x080046f1
 80045c4:	080046f1 	.word	0x080046f1
 80045c8:	0800462d 	.word	0x0800462d
 80045cc:	080046f1 	.word	0x080046f1
 80045d0:	080046f1 	.word	0x080046f1
 80045d4:	080046f1 	.word	0x080046f1
 80045d8:	0800466f 	.word	0x0800466f
 80045dc:	080046f1 	.word	0x080046f1
 80045e0:	080046f1 	.word	0x080046f1
 80045e4:	080046f1 	.word	0x080046f1
 80045e8:	080046af 	.word	0x080046af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fa2e 	bl	8004a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0208 	orr.w	r2, r2, #8
 8004606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6999      	ldr	r1, [r3, #24]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	619a      	str	r2, [r3, #24]
      break;
 800462a:	e062      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa74 	bl	8004b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6999      	ldr	r1, [r3, #24]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	021a      	lsls	r2, r3, #8
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	619a      	str	r2, [r3, #24]
      break;
 800466c:	e041      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fabf 	bl	8004bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0208 	orr.w	r2, r2, #8
 8004688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0204 	bic.w	r2, r2, #4
 8004698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69d9      	ldr	r1, [r3, #28]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	61da      	str	r2, [r3, #28]
      break;
 80046ac:	e021      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fb09 	bl	8004ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69d9      	ldr	r1, [r3, #28]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	021a      	lsls	r2, r3, #8
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	61da      	str	r2, [r3, #28]
      break;
 80046ee:	e000      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80046f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIM_ConfigClockSource+0x18>
 8004720:	2302      	movs	r3, #2
 8004722:	e0a6      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x166>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004742:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d067      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x120>
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d80b      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x6c>
 8004760:	2b10      	cmp	r3, #16
 8004762:	d073      	beq.n	800484c <HAL_TIM_ConfigClockSource+0x140>
 8004764:	2b10      	cmp	r3, #16
 8004766:	d802      	bhi.n	800476e <HAL_TIM_ConfigClockSource+0x62>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d06f      	beq.n	800484c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800476c:	e078      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800476e:	2b20      	cmp	r3, #32
 8004770:	d06c      	beq.n	800484c <HAL_TIM_ConfigClockSource+0x140>
 8004772:	2b30      	cmp	r3, #48	; 0x30
 8004774:	d06a      	beq.n	800484c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004776:	e073      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004778:	2b70      	cmp	r3, #112	; 0x70
 800477a:	d00d      	beq.n	8004798 <HAL_TIM_ConfigClockSource+0x8c>
 800477c:	2b70      	cmp	r3, #112	; 0x70
 800477e:	d804      	bhi.n	800478a <HAL_TIM_ConfigClockSource+0x7e>
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d033      	beq.n	80047ec <HAL_TIM_ConfigClockSource+0xe0>
 8004784:	2b60      	cmp	r3, #96	; 0x60
 8004786:	d041      	beq.n	800480c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004788:	e06a      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800478a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478e:	d066      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x152>
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004794:	d017      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004796:	e063      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	6899      	ldr	r1, [r3, #8]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f000 fc78 	bl	800509c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	609a      	str	r2, [r3, #8]
      break;
 80047c4:	e04c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6899      	ldr	r1, [r3, #8]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f000 fc61 	bl	800509c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e8:	609a      	str	r2, [r3, #8]
      break;
 80047ea:	e039      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	461a      	mov	r2, r3
 80047fa:	f000 fb1f 	bl	8004e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2150      	movs	r1, #80	; 0x50
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fc2e 	bl	8005066 <TIM_ITRx_SetConfig>
      break;
 800480a:	e029      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	461a      	mov	r2, r3
 800481a:	f000 fb7b 	bl	8004f14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2160      	movs	r1, #96	; 0x60
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fc1e 	bl	8005066 <TIM_ITRx_SetConfig>
      break;
 800482a:	e019      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	461a      	mov	r2, r3
 800483a:	f000 faff 	bl	8004e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2140      	movs	r1, #64	; 0x40
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fc0e 	bl	8005066 <TIM_ITRx_SetConfig>
      break;
 800484a:	e009      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f000 fc05 	bl	8005066 <TIM_ITRx_SetConfig>
      break;
 800485c:	e000      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800485e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b0c      	cmp	r3, #12
 800488e:	d831      	bhi.n	80048f4 <HAL_TIM_ReadCapturedValue+0x78>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048cd 	.word	0x080048cd
 800489c:	080048f5 	.word	0x080048f5
 80048a0:	080048f5 	.word	0x080048f5
 80048a4:	080048f5 	.word	0x080048f5
 80048a8:	080048d7 	.word	0x080048d7
 80048ac:	080048f5 	.word	0x080048f5
 80048b0:	080048f5 	.word	0x080048f5
 80048b4:	080048f5 	.word	0x080048f5
 80048b8:	080048e1 	.word	0x080048e1
 80048bc:	080048f5 	.word	0x080048f5
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	080048f5 	.word	0x080048f5
 80048c8:	080048eb 	.word	0x080048eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	60fb      	str	r3, [r7, #12]

      break;
 80048d4:	e00f      	b.n	80048f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	60fb      	str	r3, [r7, #12]

      break;
 80048de:	e00a      	b.n	80048f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	60fb      	str	r3, [r7, #12]

      break;
 80048e8:	e005      	b.n	80048f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	60fb      	str	r3, [r7, #12]

      break;
 80048f2:	e000      	b.n	80048f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80048f4:	bf00      	nop
  }

  return tmpreg;
 80048f6:	68fb      	ldr	r3, [r7, #12]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a34      	ldr	r2, [pc, #208]	; (8004a38 <TIM_Base_SetConfig+0xe4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00f      	beq.n	800498c <TIM_Base_SetConfig+0x38>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d00b      	beq.n	800498c <TIM_Base_SetConfig+0x38>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a31      	ldr	r2, [pc, #196]	; (8004a3c <TIM_Base_SetConfig+0xe8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d007      	beq.n	800498c <TIM_Base_SetConfig+0x38>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a30      	ldr	r2, [pc, #192]	; (8004a40 <TIM_Base_SetConfig+0xec>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0x38>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <TIM_Base_SetConfig+0xf0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d108      	bne.n	800499e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <TIM_Base_SetConfig+0xe4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01b      	beq.n	80049de <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ac:	d017      	beq.n	80049de <TIM_Base_SetConfig+0x8a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a22      	ldr	r2, [pc, #136]	; (8004a3c <TIM_Base_SetConfig+0xe8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <TIM_Base_SetConfig+0x8a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <TIM_Base_SetConfig+0xec>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00f      	beq.n	80049de <TIM_Base_SetConfig+0x8a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a20      	ldr	r2, [pc, #128]	; (8004a44 <TIM_Base_SetConfig+0xf0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00b      	beq.n	80049de <TIM_Base_SetConfig+0x8a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1f      	ldr	r2, [pc, #124]	; (8004a48 <TIM_Base_SetConfig+0xf4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_Base_SetConfig+0x8a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1e      	ldr	r2, [pc, #120]	; (8004a4c <TIM_Base_SetConfig+0xf8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_Base_SetConfig+0x8a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <TIM_Base_SetConfig+0xfc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d108      	bne.n	80049f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <TIM_Base_SetConfig+0xe4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d103      	bne.n	8004a24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	615a      	str	r2, [r3, #20]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800

08004a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f023 0201 	bic.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f023 0302 	bic.w	r3, r3, #2
 8004a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <TIM_OC1_SetConfig+0xc8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10c      	bne.n	8004aca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0308 	bic.w	r3, r3, #8
 8004ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <TIM_OC1_SetConfig+0xc8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d111      	bne.n	8004af6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	621a      	str	r2, [r3, #32]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40010000 	.word	0x40010000

08004b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0210 	bic.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f023 0320 	bic.w	r3, r3, #32
 8004b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <TIM_OC2_SetConfig+0xd4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10d      	bne.n	8004b9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <TIM_OC2_SetConfig+0xd4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d113      	bne.n	8004bcc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40010000 	.word	0x40010000

08004bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0303 	bic.w	r3, r3, #3
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a1d      	ldr	r2, [pc, #116]	; (8004cc8 <TIM_OC3_SetConfig+0xd0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10d      	bne.n	8004c72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a14      	ldr	r2, [pc, #80]	; (8004cc8 <TIM_OC3_SetConfig+0xd0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d113      	bne.n	8004ca2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40010000 	.word	0x40010000

08004ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	031b      	lsls	r3, r3, #12
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <TIM_OC4_SetConfig+0x9c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d109      	bne.n	8004d40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	019b      	lsls	r3, r3, #6
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000

08004d6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a24      	ldr	r2, [pc, #144]	; (8004e28 <TIM_TI1_SetConfig+0xbc>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <TIM_TI1_SetConfig+0x56>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d00f      	beq.n	8004dc2 <TIM_TI1_SetConfig+0x56>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4a21      	ldr	r2, [pc, #132]	; (8004e2c <TIM_TI1_SetConfig+0xc0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00b      	beq.n	8004dc2 <TIM_TI1_SetConfig+0x56>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <TIM_TI1_SetConfig+0xc4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <TIM_TI1_SetConfig+0x56>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <TIM_TI1_SetConfig+0xc8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d003      	beq.n	8004dc2 <TIM_TI1_SetConfig+0x56>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <TIM_TI1_SetConfig+0xcc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <TIM_TI1_SetConfig+0x5a>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <TIM_TI1_SetConfig+0x5c>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e003      	b.n	8004de6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f023 030a 	bic.w	r3, r3, #10
 8004e00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f003 030a 	and.w	r3, r3, #10
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40014000 	.word	0x40014000

08004e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0201 	bic.w	r2, r3, #1
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f023 030a 	bic.w	r3, r3, #10
 8004e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	621a      	str	r2, [r3, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b087      	sub	sp, #28
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f023 0210 	bic.w	r2, r3, #16
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	031b      	lsls	r3, r3, #12
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	621a      	str	r2, [r3, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f023 0210 	bic.w	r2, r3, #16
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	031b      	lsls	r3, r3, #12
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 0303 	bic.w	r3, r3, #3
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	621a      	str	r2, [r3, #32]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005018:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800502a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	031b      	lsls	r3, r3, #12
 8005030:	b29b      	uxth	r3, r3
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800503e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	031b      	lsls	r3, r3, #12
 8005044:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	621a      	str	r2, [r3, #32]
}
 800505a:	bf00      	nop
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	f043 0307 	orr.w	r3, r3, #7
 8005088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	609a      	str	r2, [r3, #8]
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	431a      	orrs	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	609a      	str	r2, [r3, #8]
}
 80050d0:	bf00      	nop
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2201      	movs	r2, #1
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a1a      	ldr	r2, [r3, #32]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	401a      	ands	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a1a      	ldr	r2, [r3, #32]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	fa01 f303 	lsl.w	r3, r1, r3
 8005114:	431a      	orrs	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800513c:	2302      	movs	r3, #2
 800513e:	e050      	b.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1c      	ldr	r2, [pc, #112]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d018      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d013      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a15      	ldr	r2, [pc, #84]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a13      	ldr	r2, [pc, #76]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d10c      	bne.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40010000 	.word	0x40010000
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40000c00 	.word	0x40000c00
 8005200:	40014000 	.word	0x40014000

08005204 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800521c:	2302      	movs	r3, #2
 800521e:	e03d      	b.n	800529c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e03f      	b.n	8005362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc fe56 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2224      	movs	r2, #36	; 0x24
 8005300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f90b 	bl	8005530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b088      	sub	sp, #32
 800536e:	af02      	add	r7, sp, #8
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b20      	cmp	r3, #32
 8005388:	f040 8083 	bne.w	8005492 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_UART_Transmit+0x2e>
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e07b      	b.n	8005494 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Transmit+0x40>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e074      	b.n	8005494 <HAL_UART_Transmit+0x12a>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2221      	movs	r2, #33	; 0x21
 80053bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053c0:	f7fc ff44 	bl	800224c <HAL_GetTick>
 80053c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	88fa      	ldrh	r2, [r7, #6]
 80053ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80053da:	e042      	b.n	8005462 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	d122      	bne.n	800543a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f84c 	bl	800549c <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e042      	b.n	8005494 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005420:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3302      	adds	r3, #2
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	e017      	b.n	8005462 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3301      	adds	r3, #1
 8005436:	60bb      	str	r3, [r7, #8]
 8005438:	e013      	b.n	8005462 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2200      	movs	r2, #0
 8005442:	2180      	movs	r1, #128	; 0x80
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f829 	bl	800549c <UART_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e01f      	b.n	8005494 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	60ba      	str	r2, [r7, #8]
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1b7      	bne.n	80053dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	2140      	movs	r1, #64	; 0x40
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f810 	bl	800549c <UART_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e006      	b.n	8005494 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e000      	b.n	8005494 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005492:	2302      	movs	r3, #2
  }
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	4613      	mov	r3, r2
 80054aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ac:	e02c      	b.n	8005508 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b4:	d028      	beq.n	8005508 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <UART_WaitOnFlagUntilTimeout+0x30>
 80054bc:	f7fc fec6 	bl	800224c <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d21d      	bcs.n	8005508 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e00f      	b.n	8005528 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4013      	ands	r3, r2
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	429a      	cmp	r2, r3
 8005524:	d0c3      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005572:	f023 030c 	bic.w	r3, r3, #12
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	430b      	orrs	r3, r1
 800557e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559e:	f040 818b 	bne.w	80058b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4ac1      	ldr	r2, [pc, #772]	; (80058ac <UART_SetConfig+0x37c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d005      	beq.n	80055b8 <UART_SetConfig+0x88>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4abf      	ldr	r2, [pc, #764]	; (80058b0 <UART_SetConfig+0x380>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f040 80bd 	bne.w	8005732 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055b8:	f7fe fcfa 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 80055bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	461d      	mov	r5, r3
 80055c2:	f04f 0600 	mov.w	r6, #0
 80055c6:	46a8      	mov	r8, r5
 80055c8:	46b1      	mov	r9, r6
 80055ca:	eb18 0308 	adds.w	r3, r8, r8
 80055ce:	eb49 0409 	adc.w	r4, r9, r9
 80055d2:	4698      	mov	r8, r3
 80055d4:	46a1      	mov	r9, r4
 80055d6:	eb18 0805 	adds.w	r8, r8, r5
 80055da:	eb49 0906 	adc.w	r9, r9, r6
 80055de:	f04f 0100 	mov.w	r1, #0
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055f2:	4688      	mov	r8, r1
 80055f4:	4691      	mov	r9, r2
 80055f6:	eb18 0005 	adds.w	r0, r8, r5
 80055fa:	eb49 0106 	adc.w	r1, r9, r6
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	461d      	mov	r5, r3
 8005604:	f04f 0600 	mov.w	r6, #0
 8005608:	196b      	adds	r3, r5, r5
 800560a:	eb46 0406 	adc.w	r4, r6, r6
 800560e:	461a      	mov	r2, r3
 8005610:	4623      	mov	r3, r4
 8005612:	f7fb fabb 	bl	8000b8c <__aeabi_uldivmod>
 8005616:	4603      	mov	r3, r0
 8005618:	460c      	mov	r4, r1
 800561a:	461a      	mov	r2, r3
 800561c:	4ba5      	ldr	r3, [pc, #660]	; (80058b4 <UART_SetConfig+0x384>)
 800561e:	fba3 2302 	umull	r2, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	461d      	mov	r5, r3
 800562c:	f04f 0600 	mov.w	r6, #0
 8005630:	46a9      	mov	r9, r5
 8005632:	46b2      	mov	sl, r6
 8005634:	eb19 0309 	adds.w	r3, r9, r9
 8005638:	eb4a 040a 	adc.w	r4, sl, sl
 800563c:	4699      	mov	r9, r3
 800563e:	46a2      	mov	sl, r4
 8005640:	eb19 0905 	adds.w	r9, r9, r5
 8005644:	eb4a 0a06 	adc.w	sl, sl, r6
 8005648:	f04f 0100 	mov.w	r1, #0
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005654:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005658:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800565c:	4689      	mov	r9, r1
 800565e:	4692      	mov	sl, r2
 8005660:	eb19 0005 	adds.w	r0, r9, r5
 8005664:	eb4a 0106 	adc.w	r1, sl, r6
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	461d      	mov	r5, r3
 800566e:	f04f 0600 	mov.w	r6, #0
 8005672:	196b      	adds	r3, r5, r5
 8005674:	eb46 0406 	adc.w	r4, r6, r6
 8005678:	461a      	mov	r2, r3
 800567a:	4623      	mov	r3, r4
 800567c:	f7fb fa86 	bl	8000b8c <__aeabi_uldivmod>
 8005680:	4603      	mov	r3, r0
 8005682:	460c      	mov	r4, r1
 8005684:	461a      	mov	r2, r3
 8005686:	4b8b      	ldr	r3, [pc, #556]	; (80058b4 <UART_SetConfig+0x384>)
 8005688:	fba3 1302 	umull	r1, r3, r3, r2
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	2164      	movs	r1, #100	; 0x64
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	3332      	adds	r3, #50	; 0x32
 800569a:	4a86      	ldr	r2, [pc, #536]	; (80058b4 <UART_SetConfig+0x384>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056a8:	4498      	add	r8, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	461d      	mov	r5, r3
 80056ae:	f04f 0600 	mov.w	r6, #0
 80056b2:	46a9      	mov	r9, r5
 80056b4:	46b2      	mov	sl, r6
 80056b6:	eb19 0309 	adds.w	r3, r9, r9
 80056ba:	eb4a 040a 	adc.w	r4, sl, sl
 80056be:	4699      	mov	r9, r3
 80056c0:	46a2      	mov	sl, r4
 80056c2:	eb19 0905 	adds.w	r9, r9, r5
 80056c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80056ca:	f04f 0100 	mov.w	r1, #0
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056de:	4689      	mov	r9, r1
 80056e0:	4692      	mov	sl, r2
 80056e2:	eb19 0005 	adds.w	r0, r9, r5
 80056e6:	eb4a 0106 	adc.w	r1, sl, r6
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	461d      	mov	r5, r3
 80056f0:	f04f 0600 	mov.w	r6, #0
 80056f4:	196b      	adds	r3, r5, r5
 80056f6:	eb46 0406 	adc.w	r4, r6, r6
 80056fa:	461a      	mov	r2, r3
 80056fc:	4623      	mov	r3, r4
 80056fe:	f7fb fa45 	bl	8000b8c <__aeabi_uldivmod>
 8005702:	4603      	mov	r3, r0
 8005704:	460c      	mov	r4, r1
 8005706:	461a      	mov	r2, r3
 8005708:	4b6a      	ldr	r3, [pc, #424]	; (80058b4 <UART_SetConfig+0x384>)
 800570a:	fba3 1302 	umull	r1, r3, r3, r2
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2164      	movs	r1, #100	; 0x64
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	3332      	adds	r3, #50	; 0x32
 800571c:	4a65      	ldr	r2, [pc, #404]	; (80058b4 <UART_SetConfig+0x384>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	f003 0207 	and.w	r2, r3, #7
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4442      	add	r2, r8
 800572e:	609a      	str	r2, [r3, #8]
 8005730:	e26f      	b.n	8005c12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005732:	f7fe fc29 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 8005736:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	461d      	mov	r5, r3
 800573c:	f04f 0600 	mov.w	r6, #0
 8005740:	46a8      	mov	r8, r5
 8005742:	46b1      	mov	r9, r6
 8005744:	eb18 0308 	adds.w	r3, r8, r8
 8005748:	eb49 0409 	adc.w	r4, r9, r9
 800574c:	4698      	mov	r8, r3
 800574e:	46a1      	mov	r9, r4
 8005750:	eb18 0805 	adds.w	r8, r8, r5
 8005754:	eb49 0906 	adc.w	r9, r9, r6
 8005758:	f04f 0100 	mov.w	r1, #0
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005764:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005768:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800576c:	4688      	mov	r8, r1
 800576e:	4691      	mov	r9, r2
 8005770:	eb18 0005 	adds.w	r0, r8, r5
 8005774:	eb49 0106 	adc.w	r1, r9, r6
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	461d      	mov	r5, r3
 800577e:	f04f 0600 	mov.w	r6, #0
 8005782:	196b      	adds	r3, r5, r5
 8005784:	eb46 0406 	adc.w	r4, r6, r6
 8005788:	461a      	mov	r2, r3
 800578a:	4623      	mov	r3, r4
 800578c:	f7fb f9fe 	bl	8000b8c <__aeabi_uldivmod>
 8005790:	4603      	mov	r3, r0
 8005792:	460c      	mov	r4, r1
 8005794:	461a      	mov	r2, r3
 8005796:	4b47      	ldr	r3, [pc, #284]	; (80058b4 <UART_SetConfig+0x384>)
 8005798:	fba3 2302 	umull	r2, r3, r3, r2
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	461d      	mov	r5, r3
 80057a6:	f04f 0600 	mov.w	r6, #0
 80057aa:	46a9      	mov	r9, r5
 80057ac:	46b2      	mov	sl, r6
 80057ae:	eb19 0309 	adds.w	r3, r9, r9
 80057b2:	eb4a 040a 	adc.w	r4, sl, sl
 80057b6:	4699      	mov	r9, r3
 80057b8:	46a2      	mov	sl, r4
 80057ba:	eb19 0905 	adds.w	r9, r9, r5
 80057be:	eb4a 0a06 	adc.w	sl, sl, r6
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057d6:	4689      	mov	r9, r1
 80057d8:	4692      	mov	sl, r2
 80057da:	eb19 0005 	adds.w	r0, r9, r5
 80057de:	eb4a 0106 	adc.w	r1, sl, r6
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	461d      	mov	r5, r3
 80057e8:	f04f 0600 	mov.w	r6, #0
 80057ec:	196b      	adds	r3, r5, r5
 80057ee:	eb46 0406 	adc.w	r4, r6, r6
 80057f2:	461a      	mov	r2, r3
 80057f4:	4623      	mov	r3, r4
 80057f6:	f7fb f9c9 	bl	8000b8c <__aeabi_uldivmod>
 80057fa:	4603      	mov	r3, r0
 80057fc:	460c      	mov	r4, r1
 80057fe:	461a      	mov	r2, r3
 8005800:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <UART_SetConfig+0x384>)
 8005802:	fba3 1302 	umull	r1, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	2164      	movs	r1, #100	; 0x64
 800580a:	fb01 f303 	mul.w	r3, r1, r3
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	3332      	adds	r3, #50	; 0x32
 8005814:	4a27      	ldr	r2, [pc, #156]	; (80058b4 <UART_SetConfig+0x384>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005822:	4498      	add	r8, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	461d      	mov	r5, r3
 8005828:	f04f 0600 	mov.w	r6, #0
 800582c:	46a9      	mov	r9, r5
 800582e:	46b2      	mov	sl, r6
 8005830:	eb19 0309 	adds.w	r3, r9, r9
 8005834:	eb4a 040a 	adc.w	r4, sl, sl
 8005838:	4699      	mov	r9, r3
 800583a:	46a2      	mov	sl, r4
 800583c:	eb19 0905 	adds.w	r9, r9, r5
 8005840:	eb4a 0a06 	adc.w	sl, sl, r6
 8005844:	f04f 0100 	mov.w	r1, #0
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005850:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005854:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005858:	4689      	mov	r9, r1
 800585a:	4692      	mov	sl, r2
 800585c:	eb19 0005 	adds.w	r0, r9, r5
 8005860:	eb4a 0106 	adc.w	r1, sl, r6
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	461d      	mov	r5, r3
 800586a:	f04f 0600 	mov.w	r6, #0
 800586e:	196b      	adds	r3, r5, r5
 8005870:	eb46 0406 	adc.w	r4, r6, r6
 8005874:	461a      	mov	r2, r3
 8005876:	4623      	mov	r3, r4
 8005878:	f7fb f988 	bl	8000b8c <__aeabi_uldivmod>
 800587c:	4603      	mov	r3, r0
 800587e:	460c      	mov	r4, r1
 8005880:	461a      	mov	r2, r3
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <UART_SetConfig+0x384>)
 8005884:	fba3 1302 	umull	r1, r3, r3, r2
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	2164      	movs	r1, #100	; 0x64
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	3332      	adds	r3, #50	; 0x32
 8005896:	4a07      	ldr	r2, [pc, #28]	; (80058b4 <UART_SetConfig+0x384>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	f003 0207 	and.w	r2, r3, #7
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4442      	add	r2, r8
 80058a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80058aa:	e1b2      	b.n	8005c12 <UART_SetConfig+0x6e2>
 80058ac:	40011000 	.word	0x40011000
 80058b0:	40011400 	.word	0x40011400
 80058b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4ad7      	ldr	r2, [pc, #860]	; (8005c1c <UART_SetConfig+0x6ec>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d005      	beq.n	80058ce <UART_SetConfig+0x39e>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4ad6      	ldr	r2, [pc, #856]	; (8005c20 <UART_SetConfig+0x6f0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	f040 80d1 	bne.w	8005a70 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058ce:	f7fe fb6f 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 80058d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	469a      	mov	sl, r3
 80058d8:	f04f 0b00 	mov.w	fp, #0
 80058dc:	46d0      	mov	r8, sl
 80058de:	46d9      	mov	r9, fp
 80058e0:	eb18 0308 	adds.w	r3, r8, r8
 80058e4:	eb49 0409 	adc.w	r4, r9, r9
 80058e8:	4698      	mov	r8, r3
 80058ea:	46a1      	mov	r9, r4
 80058ec:	eb18 080a 	adds.w	r8, r8, sl
 80058f0:	eb49 090b 	adc.w	r9, r9, fp
 80058f4:	f04f 0100 	mov.w	r1, #0
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005900:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005904:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005908:	4688      	mov	r8, r1
 800590a:	4691      	mov	r9, r2
 800590c:	eb1a 0508 	adds.w	r5, sl, r8
 8005910:	eb4b 0609 	adc.w	r6, fp, r9
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	4619      	mov	r1, r3
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	f04f 0400 	mov.w	r4, #0
 8005926:	0094      	lsls	r4, r2, #2
 8005928:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800592c:	008b      	lsls	r3, r1, #2
 800592e:	461a      	mov	r2, r3
 8005930:	4623      	mov	r3, r4
 8005932:	4628      	mov	r0, r5
 8005934:	4631      	mov	r1, r6
 8005936:	f7fb f929 	bl	8000b8c <__aeabi_uldivmod>
 800593a:	4603      	mov	r3, r0
 800593c:	460c      	mov	r4, r1
 800593e:	461a      	mov	r2, r3
 8005940:	4bb8      	ldr	r3, [pc, #736]	; (8005c24 <UART_SetConfig+0x6f4>)
 8005942:	fba3 2302 	umull	r2, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	469b      	mov	fp, r3
 8005950:	f04f 0c00 	mov.w	ip, #0
 8005954:	46d9      	mov	r9, fp
 8005956:	46e2      	mov	sl, ip
 8005958:	eb19 0309 	adds.w	r3, r9, r9
 800595c:	eb4a 040a 	adc.w	r4, sl, sl
 8005960:	4699      	mov	r9, r3
 8005962:	46a2      	mov	sl, r4
 8005964:	eb19 090b 	adds.w	r9, r9, fp
 8005968:	eb4a 0a0c 	adc.w	sl, sl, ip
 800596c:	f04f 0100 	mov.w	r1, #0
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005978:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800597c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005980:	4689      	mov	r9, r1
 8005982:	4692      	mov	sl, r2
 8005984:	eb1b 0509 	adds.w	r5, fp, r9
 8005988:	eb4c 060a 	adc.w	r6, ip, sl
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4619      	mov	r1, r3
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	f04f 0400 	mov.w	r4, #0
 800599e:	0094      	lsls	r4, r2, #2
 80059a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059a4:	008b      	lsls	r3, r1, #2
 80059a6:	461a      	mov	r2, r3
 80059a8:	4623      	mov	r3, r4
 80059aa:	4628      	mov	r0, r5
 80059ac:	4631      	mov	r1, r6
 80059ae:	f7fb f8ed 	bl	8000b8c <__aeabi_uldivmod>
 80059b2:	4603      	mov	r3, r0
 80059b4:	460c      	mov	r4, r1
 80059b6:	461a      	mov	r2, r3
 80059b8:	4b9a      	ldr	r3, [pc, #616]	; (8005c24 <UART_SetConfig+0x6f4>)
 80059ba:	fba3 1302 	umull	r1, r3, r3, r2
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	2164      	movs	r1, #100	; 0x64
 80059c2:	fb01 f303 	mul.w	r3, r1, r3
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	3332      	adds	r3, #50	; 0x32
 80059cc:	4a95      	ldr	r2, [pc, #596]	; (8005c24 <UART_SetConfig+0x6f4>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d8:	4498      	add	r8, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	469b      	mov	fp, r3
 80059de:	f04f 0c00 	mov.w	ip, #0
 80059e2:	46d9      	mov	r9, fp
 80059e4:	46e2      	mov	sl, ip
 80059e6:	eb19 0309 	adds.w	r3, r9, r9
 80059ea:	eb4a 040a 	adc.w	r4, sl, sl
 80059ee:	4699      	mov	r9, r3
 80059f0:	46a2      	mov	sl, r4
 80059f2:	eb19 090b 	adds.w	r9, r9, fp
 80059f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059fa:	f04f 0100 	mov.w	r1, #0
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a0e:	4689      	mov	r9, r1
 8005a10:	4692      	mov	sl, r2
 8005a12:	eb1b 0509 	adds.w	r5, fp, r9
 8005a16:	eb4c 060a 	adc.w	r6, ip, sl
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	f04f 0400 	mov.w	r4, #0
 8005a2c:	0094      	lsls	r4, r2, #2
 8005a2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a32:	008b      	lsls	r3, r1, #2
 8005a34:	461a      	mov	r2, r3
 8005a36:	4623      	mov	r3, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	f7fb f8a6 	bl	8000b8c <__aeabi_uldivmod>
 8005a40:	4603      	mov	r3, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	461a      	mov	r2, r3
 8005a46:	4b77      	ldr	r3, [pc, #476]	; (8005c24 <UART_SetConfig+0x6f4>)
 8005a48:	fba3 1302 	umull	r1, r3, r3, r2
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	2164      	movs	r1, #100	; 0x64
 8005a50:	fb01 f303 	mul.w	r3, r1, r3
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	3332      	adds	r3, #50	; 0x32
 8005a5a:	4a72      	ldr	r2, [pc, #456]	; (8005c24 <UART_SetConfig+0x6f4>)
 8005a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	f003 020f 	and.w	r2, r3, #15
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4442      	add	r2, r8
 8005a6c:	609a      	str	r2, [r3, #8]
 8005a6e:	e0d0      	b.n	8005c12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a70:	f7fe fa8a 	bl	8003f88 <HAL_RCC_GetPCLK1Freq>
 8005a74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	469a      	mov	sl, r3
 8005a7a:	f04f 0b00 	mov.w	fp, #0
 8005a7e:	46d0      	mov	r8, sl
 8005a80:	46d9      	mov	r9, fp
 8005a82:	eb18 0308 	adds.w	r3, r8, r8
 8005a86:	eb49 0409 	adc.w	r4, r9, r9
 8005a8a:	4698      	mov	r8, r3
 8005a8c:	46a1      	mov	r9, r4
 8005a8e:	eb18 080a 	adds.w	r8, r8, sl
 8005a92:	eb49 090b 	adc.w	r9, r9, fp
 8005a96:	f04f 0100 	mov.w	r1, #0
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005aa2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005aa6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005aaa:	4688      	mov	r8, r1
 8005aac:	4691      	mov	r9, r2
 8005aae:	eb1a 0508 	adds.w	r5, sl, r8
 8005ab2:	eb4b 0609 	adc.w	r6, fp, r9
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4619      	mov	r1, r3
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	f04f 0400 	mov.w	r4, #0
 8005ac8:	0094      	lsls	r4, r2, #2
 8005aca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ace:	008b      	lsls	r3, r1, #2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4623      	mov	r3, r4
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	f7fb f858 	bl	8000b8c <__aeabi_uldivmod>
 8005adc:	4603      	mov	r3, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b50      	ldr	r3, [pc, #320]	; (8005c24 <UART_SetConfig+0x6f4>)
 8005ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	469b      	mov	fp, r3
 8005af2:	f04f 0c00 	mov.w	ip, #0
 8005af6:	46d9      	mov	r9, fp
 8005af8:	46e2      	mov	sl, ip
 8005afa:	eb19 0309 	adds.w	r3, r9, r9
 8005afe:	eb4a 040a 	adc.w	r4, sl, sl
 8005b02:	4699      	mov	r9, r3
 8005b04:	46a2      	mov	sl, r4
 8005b06:	eb19 090b 	adds.w	r9, r9, fp
 8005b0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b0e:	f04f 0100 	mov.w	r1, #0
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b22:	4689      	mov	r9, r1
 8005b24:	4692      	mov	sl, r2
 8005b26:	eb1b 0509 	adds.w	r5, fp, r9
 8005b2a:	eb4c 060a 	adc.w	r6, ip, sl
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4619      	mov	r1, r3
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	f04f 0400 	mov.w	r4, #0
 8005b40:	0094      	lsls	r4, r2, #2
 8005b42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b46:	008b      	lsls	r3, r1, #2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4623      	mov	r3, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	4631      	mov	r1, r6
 8005b50:	f7fb f81c 	bl	8000b8c <__aeabi_uldivmod>
 8005b54:	4603      	mov	r3, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4b32      	ldr	r3, [pc, #200]	; (8005c24 <UART_SetConfig+0x6f4>)
 8005b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	2164      	movs	r1, #100	; 0x64
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	3332      	adds	r3, #50	; 0x32
 8005b6e:	4a2d      	ldr	r2, [pc, #180]	; (8005c24 <UART_SetConfig+0x6f4>)
 8005b70:	fba2 2303 	umull	r2, r3, r2, r3
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b7a:	4498      	add	r8, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	469b      	mov	fp, r3
 8005b80:	f04f 0c00 	mov.w	ip, #0
 8005b84:	46d9      	mov	r9, fp
 8005b86:	46e2      	mov	sl, ip
 8005b88:	eb19 0309 	adds.w	r3, r9, r9
 8005b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8005b90:	4699      	mov	r9, r3
 8005b92:	46a2      	mov	sl, r4
 8005b94:	eb19 090b 	adds.w	r9, r9, fp
 8005b98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b9c:	f04f 0100 	mov.w	r1, #0
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb0:	4689      	mov	r9, r1
 8005bb2:	4692      	mov	sl, r2
 8005bb4:	eb1b 0509 	adds.w	r5, fp, r9
 8005bb8:	eb4c 060a 	adc.w	r6, ip, sl
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	f04f 0400 	mov.w	r4, #0
 8005bce:	0094      	lsls	r4, r2, #2
 8005bd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bd4:	008b      	lsls	r3, r1, #2
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4623      	mov	r3, r4
 8005bda:	4628      	mov	r0, r5
 8005bdc:	4631      	mov	r1, r6
 8005bde:	f7fa ffd5 	bl	8000b8c <__aeabi_uldivmod>
 8005be2:	4603      	mov	r3, r0
 8005be4:	460c      	mov	r4, r1
 8005be6:	461a      	mov	r2, r3
 8005be8:	4b0e      	ldr	r3, [pc, #56]	; (8005c24 <UART_SetConfig+0x6f4>)
 8005bea:	fba3 1302 	umull	r1, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	2164      	movs	r1, #100	; 0x64
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	3332      	adds	r3, #50	; 0x32
 8005bfc:	4a09      	ldr	r2, [pc, #36]	; (8005c24 <UART_SetConfig+0x6f4>)
 8005bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	f003 020f 	and.w	r2, r3, #15
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4442      	add	r2, r8
 8005c0e:	609a      	str	r2, [r3, #8]
}
 8005c10:	e7ff      	b.n	8005c12 <UART_SetConfig+0x6e2>
 8005c12:	bf00      	nop
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1c:	40011000 	.word	0x40011000
 8005c20:	40011400 	.word	0x40011400
 8005c24:	51eb851f 	.word	0x51eb851f

08005c28 <__errno>:
 8005c28:	4b01      	ldr	r3, [pc, #4]	; (8005c30 <__errno+0x8>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20000014 	.word	0x20000014

08005c34 <__libc_init_array>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	4e0d      	ldr	r6, [pc, #52]	; (8005c6c <__libc_init_array+0x38>)
 8005c38:	4c0d      	ldr	r4, [pc, #52]	; (8005c70 <__libc_init_array+0x3c>)
 8005c3a:	1ba4      	subs	r4, r4, r6
 8005c3c:	10a4      	asrs	r4, r4, #2
 8005c3e:	2500      	movs	r5, #0
 8005c40:	42a5      	cmp	r5, r4
 8005c42:	d109      	bne.n	8005c58 <__libc_init_array+0x24>
 8005c44:	4e0b      	ldr	r6, [pc, #44]	; (8005c74 <__libc_init_array+0x40>)
 8005c46:	4c0c      	ldr	r4, [pc, #48]	; (8005c78 <__libc_init_array+0x44>)
 8005c48:	f000 fc26 	bl	8006498 <_init>
 8005c4c:	1ba4      	subs	r4, r4, r6
 8005c4e:	10a4      	asrs	r4, r4, #2
 8005c50:	2500      	movs	r5, #0
 8005c52:	42a5      	cmp	r5, r4
 8005c54:	d105      	bne.n	8005c62 <__libc_init_array+0x2e>
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
 8005c58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c5c:	4798      	blx	r3
 8005c5e:	3501      	adds	r5, #1
 8005c60:	e7ee      	b.n	8005c40 <__libc_init_array+0xc>
 8005c62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c66:	4798      	blx	r3
 8005c68:	3501      	adds	r5, #1
 8005c6a:	e7f2      	b.n	8005c52 <__libc_init_array+0x1e>
 8005c6c:	08006524 	.word	0x08006524
 8005c70:	08006524 	.word	0x08006524
 8005c74:	08006524 	.word	0x08006524
 8005c78:	08006528 	.word	0x08006528

08005c7c <memset>:
 8005c7c:	4402      	add	r2, r0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d100      	bne.n	8005c86 <memset+0xa>
 8005c84:	4770      	bx	lr
 8005c86:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8a:	e7f9      	b.n	8005c80 <memset+0x4>

08005c8c <siprintf>:
 8005c8c:	b40e      	push	{r1, r2, r3}
 8005c8e:	b500      	push	{lr}
 8005c90:	b09c      	sub	sp, #112	; 0x70
 8005c92:	ab1d      	add	r3, sp, #116	; 0x74
 8005c94:	9002      	str	r0, [sp, #8]
 8005c96:	9006      	str	r0, [sp, #24]
 8005c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c9c:	4809      	ldr	r0, [pc, #36]	; (8005cc4 <siprintf+0x38>)
 8005c9e:	9107      	str	r1, [sp, #28]
 8005ca0:	9104      	str	r1, [sp, #16]
 8005ca2:	4909      	ldr	r1, [pc, #36]	; (8005cc8 <siprintf+0x3c>)
 8005ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ca8:	9105      	str	r1, [sp, #20]
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	a902      	add	r1, sp, #8
 8005cb0:	f000 f866 	bl	8005d80 <_svfiprintf_r>
 8005cb4:	9b02      	ldr	r3, [sp, #8]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	b01c      	add	sp, #112	; 0x70
 8005cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cc0:	b003      	add	sp, #12
 8005cc2:	4770      	bx	lr
 8005cc4:	20000014 	.word	0x20000014
 8005cc8:	ffff0208 	.word	0xffff0208

08005ccc <__ssputs_r>:
 8005ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	688e      	ldr	r6, [r1, #8]
 8005cd2:	429e      	cmp	r6, r3
 8005cd4:	4682      	mov	sl, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	4690      	mov	r8, r2
 8005cda:	4699      	mov	r9, r3
 8005cdc:	d837      	bhi.n	8005d4e <__ssputs_r+0x82>
 8005cde:	898a      	ldrh	r2, [r1, #12]
 8005ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ce4:	d031      	beq.n	8005d4a <__ssputs_r+0x7e>
 8005ce6:	6825      	ldr	r5, [r4, #0]
 8005ce8:	6909      	ldr	r1, [r1, #16]
 8005cea:	1a6f      	subs	r7, r5, r1
 8005cec:	6965      	ldr	r5, [r4, #20]
 8005cee:	2302      	movs	r3, #2
 8005cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cf4:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cf8:	f109 0301 	add.w	r3, r9, #1
 8005cfc:	443b      	add	r3, r7
 8005cfe:	429d      	cmp	r5, r3
 8005d00:	bf38      	it	cc
 8005d02:	461d      	movcc	r5, r3
 8005d04:	0553      	lsls	r3, r2, #21
 8005d06:	d530      	bpl.n	8005d6a <__ssputs_r+0x9e>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f000 fb2b 	bl	8006364 <_malloc_r>
 8005d0e:	4606      	mov	r6, r0
 8005d10:	b950      	cbnz	r0, 8005d28 <__ssputs_r+0x5c>
 8005d12:	230c      	movs	r3, #12
 8005d14:	f8ca 3000 	str.w	r3, [sl]
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d1e:	81a3      	strh	r3, [r4, #12]
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	463a      	mov	r2, r7
 8005d2a:	6921      	ldr	r1, [r4, #16]
 8005d2c:	f000 faa8 	bl	8006280 <memcpy>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	6126      	str	r6, [r4, #16]
 8005d3e:	6165      	str	r5, [r4, #20]
 8005d40:	443e      	add	r6, r7
 8005d42:	1bed      	subs	r5, r5, r7
 8005d44:	6026      	str	r6, [r4, #0]
 8005d46:	60a5      	str	r5, [r4, #8]
 8005d48:	464e      	mov	r6, r9
 8005d4a:	454e      	cmp	r6, r9
 8005d4c:	d900      	bls.n	8005d50 <__ssputs_r+0x84>
 8005d4e:	464e      	mov	r6, r9
 8005d50:	4632      	mov	r2, r6
 8005d52:	4641      	mov	r1, r8
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	f000 fa9e 	bl	8006296 <memmove>
 8005d5a:	68a3      	ldr	r3, [r4, #8]
 8005d5c:	1b9b      	subs	r3, r3, r6
 8005d5e:	60a3      	str	r3, [r4, #8]
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	441e      	add	r6, r3
 8005d64:	6026      	str	r6, [r4, #0]
 8005d66:	2000      	movs	r0, #0
 8005d68:	e7dc      	b.n	8005d24 <__ssputs_r+0x58>
 8005d6a:	462a      	mov	r2, r5
 8005d6c:	f000 fb54 	bl	8006418 <_realloc_r>
 8005d70:	4606      	mov	r6, r0
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d1e2      	bne.n	8005d3c <__ssputs_r+0x70>
 8005d76:	6921      	ldr	r1, [r4, #16]
 8005d78:	4650      	mov	r0, sl
 8005d7a:	f000 faa5 	bl	80062c8 <_free_r>
 8005d7e:	e7c8      	b.n	8005d12 <__ssputs_r+0x46>

08005d80 <_svfiprintf_r>:
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	461d      	mov	r5, r3
 8005d86:	898b      	ldrh	r3, [r1, #12]
 8005d88:	061f      	lsls	r7, r3, #24
 8005d8a:	b09d      	sub	sp, #116	; 0x74
 8005d8c:	4680      	mov	r8, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	4616      	mov	r6, r2
 8005d92:	d50f      	bpl.n	8005db4 <_svfiprintf_r+0x34>
 8005d94:	690b      	ldr	r3, [r1, #16]
 8005d96:	b96b      	cbnz	r3, 8005db4 <_svfiprintf_r+0x34>
 8005d98:	2140      	movs	r1, #64	; 0x40
 8005d9a:	f000 fae3 	bl	8006364 <_malloc_r>
 8005d9e:	6020      	str	r0, [r4, #0]
 8005da0:	6120      	str	r0, [r4, #16]
 8005da2:	b928      	cbnz	r0, 8005db0 <_svfiprintf_r+0x30>
 8005da4:	230c      	movs	r3, #12
 8005da6:	f8c8 3000 	str.w	r3, [r8]
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dae:	e0c8      	b.n	8005f42 <_svfiprintf_r+0x1c2>
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	6163      	str	r3, [r4, #20]
 8005db4:	2300      	movs	r3, #0
 8005db6:	9309      	str	r3, [sp, #36]	; 0x24
 8005db8:	2320      	movs	r3, #32
 8005dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dbe:	2330      	movs	r3, #48	; 0x30
 8005dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dc4:	9503      	str	r5, [sp, #12]
 8005dc6:	f04f 0b01 	mov.w	fp, #1
 8005dca:	4637      	mov	r7, r6
 8005dcc:	463d      	mov	r5, r7
 8005dce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005dd2:	b10b      	cbz	r3, 8005dd8 <_svfiprintf_r+0x58>
 8005dd4:	2b25      	cmp	r3, #37	; 0x25
 8005dd6:	d13e      	bne.n	8005e56 <_svfiprintf_r+0xd6>
 8005dd8:	ebb7 0a06 	subs.w	sl, r7, r6
 8005ddc:	d00b      	beq.n	8005df6 <_svfiprintf_r+0x76>
 8005dde:	4653      	mov	r3, sl
 8005de0:	4632      	mov	r2, r6
 8005de2:	4621      	mov	r1, r4
 8005de4:	4640      	mov	r0, r8
 8005de6:	f7ff ff71 	bl	8005ccc <__ssputs_r>
 8005dea:	3001      	adds	r0, #1
 8005dec:	f000 80a4 	beq.w	8005f38 <_svfiprintf_r+0x1b8>
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	4453      	add	r3, sl
 8005df4:	9309      	str	r3, [sp, #36]	; 0x24
 8005df6:	783b      	ldrb	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 809d 	beq.w	8005f38 <_svfiprintf_r+0x1b8>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	9307      	str	r3, [sp, #28]
 8005e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e10:	931a      	str	r3, [sp, #104]	; 0x68
 8005e12:	462f      	mov	r7, r5
 8005e14:	2205      	movs	r2, #5
 8005e16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005e1a:	4850      	ldr	r0, [pc, #320]	; (8005f5c <_svfiprintf_r+0x1dc>)
 8005e1c:	f7fa f9e8 	bl	80001f0 <memchr>
 8005e20:	9b04      	ldr	r3, [sp, #16]
 8005e22:	b9d0      	cbnz	r0, 8005e5a <_svfiprintf_r+0xda>
 8005e24:	06d9      	lsls	r1, r3, #27
 8005e26:	bf44      	itt	mi
 8005e28:	2220      	movmi	r2, #32
 8005e2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e2e:	071a      	lsls	r2, r3, #28
 8005e30:	bf44      	itt	mi
 8005e32:	222b      	movmi	r2, #43	; 0x2b
 8005e34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e38:	782a      	ldrb	r2, [r5, #0]
 8005e3a:	2a2a      	cmp	r2, #42	; 0x2a
 8005e3c:	d015      	beq.n	8005e6a <_svfiprintf_r+0xea>
 8005e3e:	9a07      	ldr	r2, [sp, #28]
 8005e40:	462f      	mov	r7, r5
 8005e42:	2000      	movs	r0, #0
 8005e44:	250a      	movs	r5, #10
 8005e46:	4639      	mov	r1, r7
 8005e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e4c:	3b30      	subs	r3, #48	; 0x30
 8005e4e:	2b09      	cmp	r3, #9
 8005e50:	d94d      	bls.n	8005eee <_svfiprintf_r+0x16e>
 8005e52:	b1b8      	cbz	r0, 8005e84 <_svfiprintf_r+0x104>
 8005e54:	e00f      	b.n	8005e76 <_svfiprintf_r+0xf6>
 8005e56:	462f      	mov	r7, r5
 8005e58:	e7b8      	b.n	8005dcc <_svfiprintf_r+0x4c>
 8005e5a:	4a40      	ldr	r2, [pc, #256]	; (8005f5c <_svfiprintf_r+0x1dc>)
 8005e5c:	1a80      	subs	r0, r0, r2
 8005e5e:	fa0b f000 	lsl.w	r0, fp, r0
 8005e62:	4318      	orrs	r0, r3
 8005e64:	9004      	str	r0, [sp, #16]
 8005e66:	463d      	mov	r5, r7
 8005e68:	e7d3      	b.n	8005e12 <_svfiprintf_r+0x92>
 8005e6a:	9a03      	ldr	r2, [sp, #12]
 8005e6c:	1d11      	adds	r1, r2, #4
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	9103      	str	r1, [sp, #12]
 8005e72:	2a00      	cmp	r2, #0
 8005e74:	db01      	blt.n	8005e7a <_svfiprintf_r+0xfa>
 8005e76:	9207      	str	r2, [sp, #28]
 8005e78:	e004      	b.n	8005e84 <_svfiprintf_r+0x104>
 8005e7a:	4252      	negs	r2, r2
 8005e7c:	f043 0302 	orr.w	r3, r3, #2
 8005e80:	9207      	str	r2, [sp, #28]
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	783b      	ldrb	r3, [r7, #0]
 8005e86:	2b2e      	cmp	r3, #46	; 0x2e
 8005e88:	d10c      	bne.n	8005ea4 <_svfiprintf_r+0x124>
 8005e8a:	787b      	ldrb	r3, [r7, #1]
 8005e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8e:	d133      	bne.n	8005ef8 <_svfiprintf_r+0x178>
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	1d1a      	adds	r2, r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	9203      	str	r2, [sp, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bfb8      	it	lt
 8005e9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ea0:	3702      	adds	r7, #2
 8005ea2:	9305      	str	r3, [sp, #20]
 8005ea4:	4d2e      	ldr	r5, [pc, #184]	; (8005f60 <_svfiprintf_r+0x1e0>)
 8005ea6:	7839      	ldrb	r1, [r7, #0]
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f7fa f9a0 	bl	80001f0 <memchr>
 8005eb0:	b138      	cbz	r0, 8005ec2 <_svfiprintf_r+0x142>
 8005eb2:	2340      	movs	r3, #64	; 0x40
 8005eb4:	1b40      	subs	r0, r0, r5
 8005eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8005eba:	9b04      	ldr	r3, [sp, #16]
 8005ebc:	4303      	orrs	r3, r0
 8005ebe:	3701      	adds	r7, #1
 8005ec0:	9304      	str	r3, [sp, #16]
 8005ec2:	7839      	ldrb	r1, [r7, #0]
 8005ec4:	4827      	ldr	r0, [pc, #156]	; (8005f64 <_svfiprintf_r+0x1e4>)
 8005ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005eca:	2206      	movs	r2, #6
 8005ecc:	1c7e      	adds	r6, r7, #1
 8005ece:	f7fa f98f 	bl	80001f0 <memchr>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d038      	beq.n	8005f48 <_svfiprintf_r+0x1c8>
 8005ed6:	4b24      	ldr	r3, [pc, #144]	; (8005f68 <_svfiprintf_r+0x1e8>)
 8005ed8:	bb13      	cbnz	r3, 8005f20 <_svfiprintf_r+0x1a0>
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	3307      	adds	r3, #7
 8005ede:	f023 0307 	bic.w	r3, r3, #7
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	9303      	str	r3, [sp, #12]
 8005ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee8:	444b      	add	r3, r9
 8005eea:	9309      	str	r3, [sp, #36]	; 0x24
 8005eec:	e76d      	b.n	8005dca <_svfiprintf_r+0x4a>
 8005eee:	fb05 3202 	mla	r2, r5, r2, r3
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	460f      	mov	r7, r1
 8005ef6:	e7a6      	b.n	8005e46 <_svfiprintf_r+0xc6>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	3701      	adds	r7, #1
 8005efc:	9305      	str	r3, [sp, #20]
 8005efe:	4619      	mov	r1, r3
 8005f00:	250a      	movs	r5, #10
 8005f02:	4638      	mov	r0, r7
 8005f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f08:	3a30      	subs	r2, #48	; 0x30
 8005f0a:	2a09      	cmp	r2, #9
 8005f0c:	d903      	bls.n	8005f16 <_svfiprintf_r+0x196>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0c8      	beq.n	8005ea4 <_svfiprintf_r+0x124>
 8005f12:	9105      	str	r1, [sp, #20]
 8005f14:	e7c6      	b.n	8005ea4 <_svfiprintf_r+0x124>
 8005f16:	fb05 2101 	mla	r1, r5, r1, r2
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	e7f0      	b.n	8005f02 <_svfiprintf_r+0x182>
 8005f20:	ab03      	add	r3, sp, #12
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	4622      	mov	r2, r4
 8005f26:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <_svfiprintf_r+0x1ec>)
 8005f28:	a904      	add	r1, sp, #16
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	f3af 8000 	nop.w
 8005f30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005f34:	4681      	mov	r9, r0
 8005f36:	d1d6      	bne.n	8005ee6 <_svfiprintf_r+0x166>
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	065b      	lsls	r3, r3, #25
 8005f3c:	f53f af35 	bmi.w	8005daa <_svfiprintf_r+0x2a>
 8005f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f42:	b01d      	add	sp, #116	; 0x74
 8005f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f48:	ab03      	add	r3, sp, #12
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	4622      	mov	r2, r4
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <_svfiprintf_r+0x1ec>)
 8005f50:	a904      	add	r1, sp, #16
 8005f52:	4640      	mov	r0, r8
 8005f54:	f000 f882 	bl	800605c <_printf_i>
 8005f58:	e7ea      	b.n	8005f30 <_svfiprintf_r+0x1b0>
 8005f5a:	bf00      	nop
 8005f5c:	080064e8 	.word	0x080064e8
 8005f60:	080064ee 	.word	0x080064ee
 8005f64:	080064f2 	.word	0x080064f2
 8005f68:	00000000 	.word	0x00000000
 8005f6c:	08005ccd 	.word	0x08005ccd

08005f70 <_printf_common>:
 8005f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f74:	4691      	mov	r9, r2
 8005f76:	461f      	mov	r7, r3
 8005f78:	688a      	ldr	r2, [r1, #8]
 8005f7a:	690b      	ldr	r3, [r1, #16]
 8005f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f80:	4293      	cmp	r3, r2
 8005f82:	bfb8      	it	lt
 8005f84:	4613      	movlt	r3, r2
 8005f86:	f8c9 3000 	str.w	r3, [r9]
 8005f8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f8e:	4606      	mov	r6, r0
 8005f90:	460c      	mov	r4, r1
 8005f92:	b112      	cbz	r2, 8005f9a <_printf_common+0x2a>
 8005f94:	3301      	adds	r3, #1
 8005f96:	f8c9 3000 	str.w	r3, [r9]
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	0699      	lsls	r1, r3, #26
 8005f9e:	bf42      	ittt	mi
 8005fa0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005fa4:	3302      	addmi	r3, #2
 8005fa6:	f8c9 3000 	strmi.w	r3, [r9]
 8005faa:	6825      	ldr	r5, [r4, #0]
 8005fac:	f015 0506 	ands.w	r5, r5, #6
 8005fb0:	d107      	bne.n	8005fc2 <_printf_common+0x52>
 8005fb2:	f104 0a19 	add.w	sl, r4, #25
 8005fb6:	68e3      	ldr	r3, [r4, #12]
 8005fb8:	f8d9 2000 	ldr.w	r2, [r9]
 8005fbc:	1a9b      	subs	r3, r3, r2
 8005fbe:	42ab      	cmp	r3, r5
 8005fc0:	dc28      	bgt.n	8006014 <_printf_common+0xa4>
 8005fc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	3300      	adds	r3, #0
 8005fca:	bf18      	it	ne
 8005fcc:	2301      	movne	r3, #1
 8005fce:	0692      	lsls	r2, r2, #26
 8005fd0:	d42d      	bmi.n	800602e <_printf_common+0xbe>
 8005fd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	4630      	mov	r0, r6
 8005fda:	47c0      	blx	r8
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d020      	beq.n	8006022 <_printf_common+0xb2>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	68e5      	ldr	r5, [r4, #12]
 8005fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8005fe8:	f003 0306 	and.w	r3, r3, #6
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	bf08      	it	eq
 8005ff0:	1aad      	subeq	r5, r5, r2
 8005ff2:	68a3      	ldr	r3, [r4, #8]
 8005ff4:	6922      	ldr	r2, [r4, #16]
 8005ff6:	bf0c      	ite	eq
 8005ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ffc:	2500      	movne	r5, #0
 8005ffe:	4293      	cmp	r3, r2
 8006000:	bfc4      	itt	gt
 8006002:	1a9b      	subgt	r3, r3, r2
 8006004:	18ed      	addgt	r5, r5, r3
 8006006:	f04f 0900 	mov.w	r9, #0
 800600a:	341a      	adds	r4, #26
 800600c:	454d      	cmp	r5, r9
 800600e:	d11a      	bne.n	8006046 <_printf_common+0xd6>
 8006010:	2000      	movs	r0, #0
 8006012:	e008      	b.n	8006026 <_printf_common+0xb6>
 8006014:	2301      	movs	r3, #1
 8006016:	4652      	mov	r2, sl
 8006018:	4639      	mov	r1, r7
 800601a:	4630      	mov	r0, r6
 800601c:	47c0      	blx	r8
 800601e:	3001      	adds	r0, #1
 8006020:	d103      	bne.n	800602a <_printf_common+0xba>
 8006022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	3501      	adds	r5, #1
 800602c:	e7c3      	b.n	8005fb6 <_printf_common+0x46>
 800602e:	18e1      	adds	r1, r4, r3
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	2030      	movs	r0, #48	; 0x30
 8006034:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006038:	4422      	add	r2, r4
 800603a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800603e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006042:	3302      	adds	r3, #2
 8006044:	e7c5      	b.n	8005fd2 <_printf_common+0x62>
 8006046:	2301      	movs	r3, #1
 8006048:	4622      	mov	r2, r4
 800604a:	4639      	mov	r1, r7
 800604c:	4630      	mov	r0, r6
 800604e:	47c0      	blx	r8
 8006050:	3001      	adds	r0, #1
 8006052:	d0e6      	beq.n	8006022 <_printf_common+0xb2>
 8006054:	f109 0901 	add.w	r9, r9, #1
 8006058:	e7d8      	b.n	800600c <_printf_common+0x9c>
	...

0800605c <_printf_i>:
 800605c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006060:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006064:	460c      	mov	r4, r1
 8006066:	7e09      	ldrb	r1, [r1, #24]
 8006068:	b085      	sub	sp, #20
 800606a:	296e      	cmp	r1, #110	; 0x6e
 800606c:	4617      	mov	r7, r2
 800606e:	4606      	mov	r6, r0
 8006070:	4698      	mov	r8, r3
 8006072:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006074:	f000 80b3 	beq.w	80061de <_printf_i+0x182>
 8006078:	d822      	bhi.n	80060c0 <_printf_i+0x64>
 800607a:	2963      	cmp	r1, #99	; 0x63
 800607c:	d036      	beq.n	80060ec <_printf_i+0x90>
 800607e:	d80a      	bhi.n	8006096 <_printf_i+0x3a>
 8006080:	2900      	cmp	r1, #0
 8006082:	f000 80b9 	beq.w	80061f8 <_printf_i+0x19c>
 8006086:	2958      	cmp	r1, #88	; 0x58
 8006088:	f000 8083 	beq.w	8006192 <_printf_i+0x136>
 800608c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006090:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006094:	e032      	b.n	80060fc <_printf_i+0xa0>
 8006096:	2964      	cmp	r1, #100	; 0x64
 8006098:	d001      	beq.n	800609e <_printf_i+0x42>
 800609a:	2969      	cmp	r1, #105	; 0x69
 800609c:	d1f6      	bne.n	800608c <_printf_i+0x30>
 800609e:	6820      	ldr	r0, [r4, #0]
 80060a0:	6813      	ldr	r3, [r2, #0]
 80060a2:	0605      	lsls	r5, r0, #24
 80060a4:	f103 0104 	add.w	r1, r3, #4
 80060a8:	d52a      	bpl.n	8006100 <_printf_i+0xa4>
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6011      	str	r1, [r2, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da03      	bge.n	80060ba <_printf_i+0x5e>
 80060b2:	222d      	movs	r2, #45	; 0x2d
 80060b4:	425b      	negs	r3, r3
 80060b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80060ba:	486f      	ldr	r0, [pc, #444]	; (8006278 <_printf_i+0x21c>)
 80060bc:	220a      	movs	r2, #10
 80060be:	e039      	b.n	8006134 <_printf_i+0xd8>
 80060c0:	2973      	cmp	r1, #115	; 0x73
 80060c2:	f000 809d 	beq.w	8006200 <_printf_i+0x1a4>
 80060c6:	d808      	bhi.n	80060da <_printf_i+0x7e>
 80060c8:	296f      	cmp	r1, #111	; 0x6f
 80060ca:	d020      	beq.n	800610e <_printf_i+0xb2>
 80060cc:	2970      	cmp	r1, #112	; 0x70
 80060ce:	d1dd      	bne.n	800608c <_printf_i+0x30>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	f043 0320 	orr.w	r3, r3, #32
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	e003      	b.n	80060e2 <_printf_i+0x86>
 80060da:	2975      	cmp	r1, #117	; 0x75
 80060dc:	d017      	beq.n	800610e <_printf_i+0xb2>
 80060de:	2978      	cmp	r1, #120	; 0x78
 80060e0:	d1d4      	bne.n	800608c <_printf_i+0x30>
 80060e2:	2378      	movs	r3, #120	; 0x78
 80060e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060e8:	4864      	ldr	r0, [pc, #400]	; (800627c <_printf_i+0x220>)
 80060ea:	e055      	b.n	8006198 <_printf_i+0x13c>
 80060ec:	6813      	ldr	r3, [r2, #0]
 80060ee:	1d19      	adds	r1, r3, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6011      	str	r1, [r2, #0]
 80060f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060fc:	2301      	movs	r3, #1
 80060fe:	e08c      	b.n	800621a <_printf_i+0x1be>
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6011      	str	r1, [r2, #0]
 8006104:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006108:	bf18      	it	ne
 800610a:	b21b      	sxthne	r3, r3
 800610c:	e7cf      	b.n	80060ae <_printf_i+0x52>
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	6825      	ldr	r5, [r4, #0]
 8006112:	1d18      	adds	r0, r3, #4
 8006114:	6010      	str	r0, [r2, #0]
 8006116:	0628      	lsls	r0, r5, #24
 8006118:	d501      	bpl.n	800611e <_printf_i+0xc2>
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	e002      	b.n	8006124 <_printf_i+0xc8>
 800611e:	0668      	lsls	r0, r5, #25
 8006120:	d5fb      	bpl.n	800611a <_printf_i+0xbe>
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	4854      	ldr	r0, [pc, #336]	; (8006278 <_printf_i+0x21c>)
 8006126:	296f      	cmp	r1, #111	; 0x6f
 8006128:	bf14      	ite	ne
 800612a:	220a      	movne	r2, #10
 800612c:	2208      	moveq	r2, #8
 800612e:	2100      	movs	r1, #0
 8006130:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006134:	6865      	ldr	r5, [r4, #4]
 8006136:	60a5      	str	r5, [r4, #8]
 8006138:	2d00      	cmp	r5, #0
 800613a:	f2c0 8095 	blt.w	8006268 <_printf_i+0x20c>
 800613e:	6821      	ldr	r1, [r4, #0]
 8006140:	f021 0104 	bic.w	r1, r1, #4
 8006144:	6021      	str	r1, [r4, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d13d      	bne.n	80061c6 <_printf_i+0x16a>
 800614a:	2d00      	cmp	r5, #0
 800614c:	f040 808e 	bne.w	800626c <_printf_i+0x210>
 8006150:	4665      	mov	r5, ip
 8006152:	2a08      	cmp	r2, #8
 8006154:	d10b      	bne.n	800616e <_printf_i+0x112>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	07db      	lsls	r3, r3, #31
 800615a:	d508      	bpl.n	800616e <_printf_i+0x112>
 800615c:	6923      	ldr	r3, [r4, #16]
 800615e:	6862      	ldr	r2, [r4, #4]
 8006160:	429a      	cmp	r2, r3
 8006162:	bfde      	ittt	le
 8006164:	2330      	movle	r3, #48	; 0x30
 8006166:	f805 3c01 	strble.w	r3, [r5, #-1]
 800616a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800616e:	ebac 0305 	sub.w	r3, ip, r5
 8006172:	6123      	str	r3, [r4, #16]
 8006174:	f8cd 8000 	str.w	r8, [sp]
 8006178:	463b      	mov	r3, r7
 800617a:	aa03      	add	r2, sp, #12
 800617c:	4621      	mov	r1, r4
 800617e:	4630      	mov	r0, r6
 8006180:	f7ff fef6 	bl	8005f70 <_printf_common>
 8006184:	3001      	adds	r0, #1
 8006186:	d14d      	bne.n	8006224 <_printf_i+0x1c8>
 8006188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800618c:	b005      	add	sp, #20
 800618e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006192:	4839      	ldr	r0, [pc, #228]	; (8006278 <_printf_i+0x21c>)
 8006194:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006198:	6813      	ldr	r3, [r2, #0]
 800619a:	6821      	ldr	r1, [r4, #0]
 800619c:	1d1d      	adds	r5, r3, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6015      	str	r5, [r2, #0]
 80061a2:	060a      	lsls	r2, r1, #24
 80061a4:	d50b      	bpl.n	80061be <_printf_i+0x162>
 80061a6:	07ca      	lsls	r2, r1, #31
 80061a8:	bf44      	itt	mi
 80061aa:	f041 0120 	orrmi.w	r1, r1, #32
 80061ae:	6021      	strmi	r1, [r4, #0]
 80061b0:	b91b      	cbnz	r3, 80061ba <_printf_i+0x15e>
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	f022 0220 	bic.w	r2, r2, #32
 80061b8:	6022      	str	r2, [r4, #0]
 80061ba:	2210      	movs	r2, #16
 80061bc:	e7b7      	b.n	800612e <_printf_i+0xd2>
 80061be:	064d      	lsls	r5, r1, #25
 80061c0:	bf48      	it	mi
 80061c2:	b29b      	uxthmi	r3, r3
 80061c4:	e7ef      	b.n	80061a6 <_printf_i+0x14a>
 80061c6:	4665      	mov	r5, ip
 80061c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061cc:	fb02 3311 	mls	r3, r2, r1, r3
 80061d0:	5cc3      	ldrb	r3, [r0, r3]
 80061d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80061d6:	460b      	mov	r3, r1
 80061d8:	2900      	cmp	r1, #0
 80061da:	d1f5      	bne.n	80061c8 <_printf_i+0x16c>
 80061dc:	e7b9      	b.n	8006152 <_printf_i+0xf6>
 80061de:	6813      	ldr	r3, [r2, #0]
 80061e0:	6825      	ldr	r5, [r4, #0]
 80061e2:	6961      	ldr	r1, [r4, #20]
 80061e4:	1d18      	adds	r0, r3, #4
 80061e6:	6010      	str	r0, [r2, #0]
 80061e8:	0628      	lsls	r0, r5, #24
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	d501      	bpl.n	80061f2 <_printf_i+0x196>
 80061ee:	6019      	str	r1, [r3, #0]
 80061f0:	e002      	b.n	80061f8 <_printf_i+0x19c>
 80061f2:	066a      	lsls	r2, r5, #25
 80061f4:	d5fb      	bpl.n	80061ee <_printf_i+0x192>
 80061f6:	8019      	strh	r1, [r3, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	6123      	str	r3, [r4, #16]
 80061fc:	4665      	mov	r5, ip
 80061fe:	e7b9      	b.n	8006174 <_printf_i+0x118>
 8006200:	6813      	ldr	r3, [r2, #0]
 8006202:	1d19      	adds	r1, r3, #4
 8006204:	6011      	str	r1, [r2, #0]
 8006206:	681d      	ldr	r5, [r3, #0]
 8006208:	6862      	ldr	r2, [r4, #4]
 800620a:	2100      	movs	r1, #0
 800620c:	4628      	mov	r0, r5
 800620e:	f7f9 ffef 	bl	80001f0 <memchr>
 8006212:	b108      	cbz	r0, 8006218 <_printf_i+0x1bc>
 8006214:	1b40      	subs	r0, r0, r5
 8006216:	6060      	str	r0, [r4, #4]
 8006218:	6863      	ldr	r3, [r4, #4]
 800621a:	6123      	str	r3, [r4, #16]
 800621c:	2300      	movs	r3, #0
 800621e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006222:	e7a7      	b.n	8006174 <_printf_i+0x118>
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	462a      	mov	r2, r5
 8006228:	4639      	mov	r1, r7
 800622a:	4630      	mov	r0, r6
 800622c:	47c0      	blx	r8
 800622e:	3001      	adds	r0, #1
 8006230:	d0aa      	beq.n	8006188 <_printf_i+0x12c>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	079b      	lsls	r3, r3, #30
 8006236:	d413      	bmi.n	8006260 <_printf_i+0x204>
 8006238:	68e0      	ldr	r0, [r4, #12]
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	4298      	cmp	r0, r3
 800623e:	bfb8      	it	lt
 8006240:	4618      	movlt	r0, r3
 8006242:	e7a3      	b.n	800618c <_printf_i+0x130>
 8006244:	2301      	movs	r3, #1
 8006246:	464a      	mov	r2, r9
 8006248:	4639      	mov	r1, r7
 800624a:	4630      	mov	r0, r6
 800624c:	47c0      	blx	r8
 800624e:	3001      	adds	r0, #1
 8006250:	d09a      	beq.n	8006188 <_printf_i+0x12c>
 8006252:	3501      	adds	r5, #1
 8006254:	68e3      	ldr	r3, [r4, #12]
 8006256:	9a03      	ldr	r2, [sp, #12]
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	42ab      	cmp	r3, r5
 800625c:	dcf2      	bgt.n	8006244 <_printf_i+0x1e8>
 800625e:	e7eb      	b.n	8006238 <_printf_i+0x1dc>
 8006260:	2500      	movs	r5, #0
 8006262:	f104 0919 	add.w	r9, r4, #25
 8006266:	e7f5      	b.n	8006254 <_printf_i+0x1f8>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1ac      	bne.n	80061c6 <_printf_i+0x16a>
 800626c:	7803      	ldrb	r3, [r0, #0]
 800626e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006272:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006276:	e76c      	b.n	8006152 <_printf_i+0xf6>
 8006278:	080064f9 	.word	0x080064f9
 800627c:	0800650a 	.word	0x0800650a

08006280 <memcpy>:
 8006280:	b510      	push	{r4, lr}
 8006282:	1e43      	subs	r3, r0, #1
 8006284:	440a      	add	r2, r1
 8006286:	4291      	cmp	r1, r2
 8006288:	d100      	bne.n	800628c <memcpy+0xc>
 800628a:	bd10      	pop	{r4, pc}
 800628c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006290:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006294:	e7f7      	b.n	8006286 <memcpy+0x6>

08006296 <memmove>:
 8006296:	4288      	cmp	r0, r1
 8006298:	b510      	push	{r4, lr}
 800629a:	eb01 0302 	add.w	r3, r1, r2
 800629e:	d807      	bhi.n	80062b0 <memmove+0x1a>
 80062a0:	1e42      	subs	r2, r0, #1
 80062a2:	4299      	cmp	r1, r3
 80062a4:	d00a      	beq.n	80062bc <memmove+0x26>
 80062a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80062ae:	e7f8      	b.n	80062a2 <memmove+0xc>
 80062b0:	4283      	cmp	r3, r0
 80062b2:	d9f5      	bls.n	80062a0 <memmove+0xa>
 80062b4:	1881      	adds	r1, r0, r2
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	42d3      	cmn	r3, r2
 80062ba:	d100      	bne.n	80062be <memmove+0x28>
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80062c6:	e7f7      	b.n	80062b8 <memmove+0x22>

080062c8 <_free_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4605      	mov	r5, r0
 80062cc:	2900      	cmp	r1, #0
 80062ce:	d045      	beq.n	800635c <_free_r+0x94>
 80062d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d4:	1f0c      	subs	r4, r1, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bfb8      	it	lt
 80062da:	18e4      	addlt	r4, r4, r3
 80062dc:	f000 f8d2 	bl	8006484 <__malloc_lock>
 80062e0:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <_free_r+0x98>)
 80062e2:	6813      	ldr	r3, [r2, #0]
 80062e4:	4610      	mov	r0, r2
 80062e6:	b933      	cbnz	r3, 80062f6 <_free_r+0x2e>
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	6014      	str	r4, [r2, #0]
 80062ec:	4628      	mov	r0, r5
 80062ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f2:	f000 b8c8 	b.w	8006486 <__malloc_unlock>
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	d90c      	bls.n	8006314 <_free_r+0x4c>
 80062fa:	6821      	ldr	r1, [r4, #0]
 80062fc:	1862      	adds	r2, r4, r1
 80062fe:	4293      	cmp	r3, r2
 8006300:	bf04      	itt	eq
 8006302:	681a      	ldreq	r2, [r3, #0]
 8006304:	685b      	ldreq	r3, [r3, #4]
 8006306:	6063      	str	r3, [r4, #4]
 8006308:	bf04      	itt	eq
 800630a:	1852      	addeq	r2, r2, r1
 800630c:	6022      	streq	r2, [r4, #0]
 800630e:	6004      	str	r4, [r0, #0]
 8006310:	e7ec      	b.n	80062ec <_free_r+0x24>
 8006312:	4613      	mov	r3, r2
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	b10a      	cbz	r2, 800631c <_free_r+0x54>
 8006318:	42a2      	cmp	r2, r4
 800631a:	d9fa      	bls.n	8006312 <_free_r+0x4a>
 800631c:	6819      	ldr	r1, [r3, #0]
 800631e:	1858      	adds	r0, r3, r1
 8006320:	42a0      	cmp	r0, r4
 8006322:	d10b      	bne.n	800633c <_free_r+0x74>
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	4401      	add	r1, r0
 8006328:	1858      	adds	r0, r3, r1
 800632a:	4282      	cmp	r2, r0
 800632c:	6019      	str	r1, [r3, #0]
 800632e:	d1dd      	bne.n	80062ec <_free_r+0x24>
 8006330:	6810      	ldr	r0, [r2, #0]
 8006332:	6852      	ldr	r2, [r2, #4]
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	4401      	add	r1, r0
 8006338:	6019      	str	r1, [r3, #0]
 800633a:	e7d7      	b.n	80062ec <_free_r+0x24>
 800633c:	d902      	bls.n	8006344 <_free_r+0x7c>
 800633e:	230c      	movs	r3, #12
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	e7d3      	b.n	80062ec <_free_r+0x24>
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	1821      	adds	r1, r4, r0
 8006348:	428a      	cmp	r2, r1
 800634a:	bf04      	itt	eq
 800634c:	6811      	ldreq	r1, [r2, #0]
 800634e:	6852      	ldreq	r2, [r2, #4]
 8006350:	6062      	str	r2, [r4, #4]
 8006352:	bf04      	itt	eq
 8006354:	1809      	addeq	r1, r1, r0
 8006356:	6021      	streq	r1, [r4, #0]
 8006358:	605c      	str	r4, [r3, #4]
 800635a:	e7c7      	b.n	80062ec <_free_r+0x24>
 800635c:	bd38      	pop	{r3, r4, r5, pc}
 800635e:	bf00      	nop
 8006360:	200000bc 	.word	0x200000bc

08006364 <_malloc_r>:
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	1ccd      	adds	r5, r1, #3
 8006368:	f025 0503 	bic.w	r5, r5, #3
 800636c:	3508      	adds	r5, #8
 800636e:	2d0c      	cmp	r5, #12
 8006370:	bf38      	it	cc
 8006372:	250c      	movcc	r5, #12
 8006374:	2d00      	cmp	r5, #0
 8006376:	4606      	mov	r6, r0
 8006378:	db01      	blt.n	800637e <_malloc_r+0x1a>
 800637a:	42a9      	cmp	r1, r5
 800637c:	d903      	bls.n	8006386 <_malloc_r+0x22>
 800637e:	230c      	movs	r3, #12
 8006380:	6033      	str	r3, [r6, #0]
 8006382:	2000      	movs	r0, #0
 8006384:	bd70      	pop	{r4, r5, r6, pc}
 8006386:	f000 f87d 	bl	8006484 <__malloc_lock>
 800638a:	4a21      	ldr	r2, [pc, #132]	; (8006410 <_malloc_r+0xac>)
 800638c:	6814      	ldr	r4, [r2, #0]
 800638e:	4621      	mov	r1, r4
 8006390:	b991      	cbnz	r1, 80063b8 <_malloc_r+0x54>
 8006392:	4c20      	ldr	r4, [pc, #128]	; (8006414 <_malloc_r+0xb0>)
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	b91b      	cbnz	r3, 80063a0 <_malloc_r+0x3c>
 8006398:	4630      	mov	r0, r6
 800639a:	f000 f863 	bl	8006464 <_sbrk_r>
 800639e:	6020      	str	r0, [r4, #0]
 80063a0:	4629      	mov	r1, r5
 80063a2:	4630      	mov	r0, r6
 80063a4:	f000 f85e 	bl	8006464 <_sbrk_r>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d124      	bne.n	80063f6 <_malloc_r+0x92>
 80063ac:	230c      	movs	r3, #12
 80063ae:	6033      	str	r3, [r6, #0]
 80063b0:	4630      	mov	r0, r6
 80063b2:	f000 f868 	bl	8006486 <__malloc_unlock>
 80063b6:	e7e4      	b.n	8006382 <_malloc_r+0x1e>
 80063b8:	680b      	ldr	r3, [r1, #0]
 80063ba:	1b5b      	subs	r3, r3, r5
 80063bc:	d418      	bmi.n	80063f0 <_malloc_r+0x8c>
 80063be:	2b0b      	cmp	r3, #11
 80063c0:	d90f      	bls.n	80063e2 <_malloc_r+0x7e>
 80063c2:	600b      	str	r3, [r1, #0]
 80063c4:	50cd      	str	r5, [r1, r3]
 80063c6:	18cc      	adds	r4, r1, r3
 80063c8:	4630      	mov	r0, r6
 80063ca:	f000 f85c 	bl	8006486 <__malloc_unlock>
 80063ce:	f104 000b 	add.w	r0, r4, #11
 80063d2:	1d23      	adds	r3, r4, #4
 80063d4:	f020 0007 	bic.w	r0, r0, #7
 80063d8:	1ac3      	subs	r3, r0, r3
 80063da:	d0d3      	beq.n	8006384 <_malloc_r+0x20>
 80063dc:	425a      	negs	r2, r3
 80063de:	50e2      	str	r2, [r4, r3]
 80063e0:	e7d0      	b.n	8006384 <_malloc_r+0x20>
 80063e2:	428c      	cmp	r4, r1
 80063e4:	684b      	ldr	r3, [r1, #4]
 80063e6:	bf16      	itet	ne
 80063e8:	6063      	strne	r3, [r4, #4]
 80063ea:	6013      	streq	r3, [r2, #0]
 80063ec:	460c      	movne	r4, r1
 80063ee:	e7eb      	b.n	80063c8 <_malloc_r+0x64>
 80063f0:	460c      	mov	r4, r1
 80063f2:	6849      	ldr	r1, [r1, #4]
 80063f4:	e7cc      	b.n	8006390 <_malloc_r+0x2c>
 80063f6:	1cc4      	adds	r4, r0, #3
 80063f8:	f024 0403 	bic.w	r4, r4, #3
 80063fc:	42a0      	cmp	r0, r4
 80063fe:	d005      	beq.n	800640c <_malloc_r+0xa8>
 8006400:	1a21      	subs	r1, r4, r0
 8006402:	4630      	mov	r0, r6
 8006404:	f000 f82e 	bl	8006464 <_sbrk_r>
 8006408:	3001      	adds	r0, #1
 800640a:	d0cf      	beq.n	80063ac <_malloc_r+0x48>
 800640c:	6025      	str	r5, [r4, #0]
 800640e:	e7db      	b.n	80063c8 <_malloc_r+0x64>
 8006410:	200000bc 	.word	0x200000bc
 8006414:	200000c0 	.word	0x200000c0

08006418 <_realloc_r>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	4607      	mov	r7, r0
 800641c:	4614      	mov	r4, r2
 800641e:	460e      	mov	r6, r1
 8006420:	b921      	cbnz	r1, 800642c <_realloc_r+0x14>
 8006422:	4611      	mov	r1, r2
 8006424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006428:	f7ff bf9c 	b.w	8006364 <_malloc_r>
 800642c:	b922      	cbnz	r2, 8006438 <_realloc_r+0x20>
 800642e:	f7ff ff4b 	bl	80062c8 <_free_r>
 8006432:	4625      	mov	r5, r4
 8006434:	4628      	mov	r0, r5
 8006436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006438:	f000 f826 	bl	8006488 <_malloc_usable_size_r>
 800643c:	42a0      	cmp	r0, r4
 800643e:	d20f      	bcs.n	8006460 <_realloc_r+0x48>
 8006440:	4621      	mov	r1, r4
 8006442:	4638      	mov	r0, r7
 8006444:	f7ff ff8e 	bl	8006364 <_malloc_r>
 8006448:	4605      	mov	r5, r0
 800644a:	2800      	cmp	r0, #0
 800644c:	d0f2      	beq.n	8006434 <_realloc_r+0x1c>
 800644e:	4631      	mov	r1, r6
 8006450:	4622      	mov	r2, r4
 8006452:	f7ff ff15 	bl	8006280 <memcpy>
 8006456:	4631      	mov	r1, r6
 8006458:	4638      	mov	r0, r7
 800645a:	f7ff ff35 	bl	80062c8 <_free_r>
 800645e:	e7e9      	b.n	8006434 <_realloc_r+0x1c>
 8006460:	4635      	mov	r5, r6
 8006462:	e7e7      	b.n	8006434 <_realloc_r+0x1c>

08006464 <_sbrk_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4c06      	ldr	r4, [pc, #24]	; (8006480 <_sbrk_r+0x1c>)
 8006468:	2300      	movs	r3, #0
 800646a:	4605      	mov	r5, r0
 800646c:	4608      	mov	r0, r1
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	f7fb fe1a 	bl	80020a8 <_sbrk>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_sbrk_r+0x1a>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	b103      	cbz	r3, 800647e <_sbrk_r+0x1a>
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	200002b0 	.word	0x200002b0

08006484 <__malloc_lock>:
 8006484:	4770      	bx	lr

08006486 <__malloc_unlock>:
 8006486:	4770      	bx	lr

08006488 <_malloc_usable_size_r>:
 8006488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648c:	1f18      	subs	r0, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfbc      	itt	lt
 8006492:	580b      	ldrlt	r3, [r1, r0]
 8006494:	18c0      	addlt	r0, r0, r3
 8006496:	4770      	bx	lr

08006498 <_init>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	bf00      	nop
 800649c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649e:	bc08      	pop	{r3}
 80064a0:	469e      	mov	lr, r3
 80064a2:	4770      	bx	lr

080064a4 <_fini>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	bf00      	nop
 80064a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064aa:	bc08      	pop	{r3}
 80064ac:	469e      	mov	lr, r3
 80064ae:	4770      	bx	lr
